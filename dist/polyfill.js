//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('polyfill', ["jsdom","node-fetch"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('jsdom'),require('node-fetch'));
    else
        return  this['polyfill'] = factory.call(self,this['jsdom'],this['node-fetch']);

})(function (jsdom,node_fetch) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

var _module_ = {
    './DOM-polyfill': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _jsdom = require('jsdom');

            var _nodeFetch = _interopRequireDefault(require('node-fetch'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var _default = _jsdom.JSDOM;
            exports.default = _default;

            var _ref = new _jsdom.JSDOM('', {
                    url: 'http://test.com/',
                    pretendToBeVisual: true
                }),
                window = _ref.window;

            var _arr = [
                'self',
                'document',
                'Node',
                'Element',
                'HTMLElement',
                'DocumentFragment',
                'HTMLDocument',
                'DOMParser',
                'XMLSerializer',
                'Event',
                'CustomEvent',
                'URL',
                'URLSearchParams',
                'FormData',
                'Blob'
            ];

            for (var _i = 0; _i < _arr.length; _i++) {
                var key = _arr[_i];
                global[key] = window[key];
            }

            self.fetch = _nodeFetch.default;
        }
    },
    jsdom: {
        exports: jsdom
    },
    'node-fetch': {
        exports: node_fetch
    }
};

    return _include_('./DOM-polyfill');
});