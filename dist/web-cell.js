//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('web-cell', factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global);
    else
        return  this['web-cell'] = factory.call(self);

})(function () {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
            ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(
                        source,
                        sym
                    ).enumerable;
                })
            );
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

function _typeof(obj) {
    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
        };
    }
    return _typeof(obj);
}

function _get(target, property, receiver) {
    if (typeof Reflect !== 'undefined' && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function _get(target, property, receiver) {
            var base = _superPropBase(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}

function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (object === null) break;
    }
    return object;
}

function _toConsumableArray(arr) {
    return (
        _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread()
    );
}

function _nonIterableSpread() {
    throw new TypeError('Invalid attempt to spread non-iterable instance');
}

function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    }
}

function _decorate(decorators, factory, superClass) {
    var r = factory(function initialize(O) {
        _initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = _decorateClass(
        _coalesceClassElements(r.d.map(_createElementDescriptor)),
        decorators
    );
    _initializeClassElements(r.F, decorated.elements);
    return _runClassFinishers(r.F, decorated.finishers);
}

function _createElementDescriptor(def) {
    var key = _toPropertyKey(def.key);
    var descriptor;
    if (def.kind === 'method') {
        descriptor = {
            value: def.value,
            writable: true,
            configurable: true,
            enumerable: false
        };
        Object.defineProperty(def.value, 'name', {
            value: _typeof(key) === 'symbol' ? '' : key,
            configurable: true
        });
    } else if (def.kind === 'get') {
        descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === 'set') {
        descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === 'field') {
        descriptor = { configurable: true, writable: true, enumerable: true };
    }
    var element = {
        kind: def.kind === 'field' ? 'field' : 'method',
        key: key,
        placement: def.static
            ? 'static'
            : def.kind === 'field'
            ? 'own'
            : 'prototype',
        descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === 'field') element.initializer = def.value;
    return element;
}

function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) {
        other.descriptor.get = element.descriptor.get;
    } else {
        other.descriptor.set = element.descriptor.set;
    }
}

function _coalesceClassElements(elements) {
    var newElements = [];
    var isSameElement = function isSameElement(other) {
        return (
            other.kind === 'method' &&
            other.key === element.key &&
            other.placement === element.placement
        );
    };
    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        var other;
        if (
            element.kind === 'method' &&
            (other = newElements.find(isSameElement))
        ) {
            if (
                _isDataDescriptor(element.descriptor) ||
                _isDataDescriptor(other.descriptor)
            ) {
                if (_hasDecorators(element) || _hasDecorators(other)) {
                    throw new ReferenceError(
                        'Duplicated methods (' +
                            element.key +
                            ") can't be decorated."
                    );
                }
                other.descriptor = element.descriptor;
            } else {
                if (_hasDecorators(element)) {
                    if (_hasDecorators(other)) {
                        throw new ReferenceError(
                            "Decorators can't be placed on different accessors with for " +
                                'the same property (' +
                                element.key +
                                ').'
                        );
                    }
                    other.decorators = element.decorators;
                }
                _coalesceGetterSetter(element, other);
            }
        } else {
            newElements.push(element);
        }
    }
    return newElements;
}

function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
}

function _isDataDescriptor(desc) {
    return (
        desc !== undefined &&
        !(desc.value === undefined && desc.writable === undefined)
    );
}

function _initializeClassElements(F, elements) {
    var proto = F.prototype;
    ['method', 'field'].forEach(function(kind) {
        elements.forEach(function(element) {
            var placement = element.placement;
            if (
                element.kind === kind &&
                (placement === 'static' || placement === 'prototype')
            ) {
                var receiver = placement === 'static' ? F : proto;
                _defineClassElement(receiver, element);
            }
        });
    });
}

function _initializeInstanceElements(O, elements) {
    ['method', 'field'].forEach(function(kind) {
        elements.forEach(function(element) {
            if (element.kind === kind && element.placement === 'own') {
                _defineClassElement(O, element);
            }
        });
    });
}

function _defineClassElement(receiver, element) {
    var descriptor = element.descriptor;
    if (element.kind === 'field') {
        var initializer = element.initializer;
        descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver)
        };
    }
    Object.defineProperty(receiver, element.key, descriptor);
}

function _decorateClass(elements, decorators) {
    var newElements = [];
    var finishers = [];
    var placements = { static: [], prototype: [], own: [] };
    elements.forEach(function(element) {
        _addElementPlacement(element, placements);
    });
    elements.forEach(function(element) {
        if (!_hasDecorators(element)) return newElements.push(element);
        var elementFinishersExtras = _decorateElement(element, placements);
        newElements.push(elementFinishersExtras.element);
        newElements.push.apply(newElements, elementFinishersExtras.extras);
        finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });
    if (!decorators) {
        return { elements: newElements, finishers: finishers };
    }
    var result = _decorateConstructor(newElements, decorators);
    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;
    return result;
}

function _addElementPlacement(element, placements, silent) {
    var keys = placements[element.placement];
    if (!silent && keys.indexOf(element.key) !== -1) {
        throw new TypeError('Duplicated element (' + element.key + ')');
    }
    keys.push(element.key);
}

function _decorateElement(element, placements) {
    var extras = [];
    var finishers = [];
    for (
        var decorators = element.decorators, i = decorators.length - 1;
        i >= 0;
        i--
    ) {
        var keys = placements[element.placement];
        keys.splice(keys.indexOf(element.key), 1);
        var elementObject = _fromElementDescriptor(element);
        var elementFinisherExtras = _toElementFinisherExtras(
            (0, decorators[i])(elementObject) || elementObject
        );
        element = elementFinisherExtras.element;
        _addElementPlacement(element, placements);
        if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
        }
        var newExtras = elementFinisherExtras.extras;
        if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
                _addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
        }
    }
    return { element: element, finishers: finishers, extras: extras };
}

function _decorateConstructor(elements, decorators) {
    var finishers = [];
    for (var i = decorators.length - 1; i >= 0; i--) {
        var obj = _fromClassDescriptor(elements);
        var elementsAndFinisher = _toClassDescriptor(
            (0, decorators[i])(obj) || obj
        );
        if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
        }
        if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;
            for (var j = 0; j < elements.length - 1; j++) {
                for (var k = j + 1; k < elements.length; k++) {
                    if (
                        elements[j].key === elements[k].key &&
                        elements[j].placement === elements[k].placement
                    ) {
                        throw new TypeError(
                            'Duplicated element (' + elements[j].key + ')'
                        );
                    }
                }
            }
        }
    }
    return { elements: elements, finishers: finishers };
}

function _fromElementDescriptor(element) {
    var obj = {
        kind: element.kind,
        key: element.key,
        placement: element.placement,
        descriptor: element.descriptor
    };
    var desc = { value: 'Descriptor', configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    if (element.kind === 'field') obj.initializer = element.initializer;
    return obj;
}

function _toElementDescriptors(elementObjects) {
    if (elementObjects === undefined) return;
    return _toArray(elementObjects).map(function(elementObject) {
        var element = _toElementDescriptor(elementObject);
        _disallowProperty(elementObject, 'finisher', 'An element descriptor');
        _disallowProperty(elementObject, 'extras', 'An element descriptor');
        return element;
    });
}

function _toElementDescriptor(elementObject) {
    var kind = String(elementObject.kind);
    if (kind !== 'method' && kind !== 'field') {
        throw new TypeError(
            'An element descriptor\'s .kind property must be either "method" or' +
                ' "field", but a decorator created an element descriptor with' +
                ' .kind "' +
                kind +
                '"'
        );
    }
    var key = _toPropertyKey(elementObject.key);
    var placement = String(elementObject.placement);
    if (
        placement !== 'static' &&
        placement !== 'prototype' &&
        placement !== 'own'
    ) {
        throw new TypeError(
            'An element descriptor\'s .placement property must be one of "static",' +
                ' "prototype" or "own", but a decorator created an element descriptor' +
                ' with .placement "' +
                placement +
                '"'
        );
    }
    var descriptor = elementObject.descriptor;
    _disallowProperty(elementObject, 'elements', 'An element descriptor');
    var element = {
        kind: kind,
        key: key,
        placement: placement,
        descriptor: Object.assign({}, descriptor)
    };
    if (kind !== 'field') {
        _disallowProperty(elementObject, 'initializer', 'A method descriptor');
    } else {
        _disallowProperty(
            descriptor,
            'get',
            'The property descriptor of a field descriptor'
        );
        _disallowProperty(
            descriptor,
            'set',
            'The property descriptor of a field descriptor'
        );
        _disallowProperty(
            descriptor,
            'value',
            'The property descriptor of a field descriptor'
        );
        element.initializer = elementObject.initializer;
    }
    return element;
}

function _toElementFinisherExtras(elementObject) {
    var element = _toElementDescriptor(elementObject);
    var finisher = _optionalCallableProperty(elementObject, 'finisher');
    var extras = _toElementDescriptors(elementObject.extras);
    return { element: element, finisher: finisher, extras: extras };
}

function _fromClassDescriptor(elements) {
    var obj = { kind: 'class', elements: elements.map(_fromElementDescriptor) };
    var desc = { value: 'Descriptor', configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    return obj;
}

function _toClassDescriptor(obj) {
    var kind = String(obj.kind);
    if (kind !== 'class') {
        throw new TypeError(
            'A class descriptor\'s .kind property must be "class", but a decorator' +
                ' created a class descriptor with .kind "' +
                kind +
                '"'
        );
    }
    _disallowProperty(obj, 'key', 'A class descriptor');
    _disallowProperty(obj, 'placement', 'A class descriptor');
    _disallowProperty(obj, 'descriptor', 'A class descriptor');
    _disallowProperty(obj, 'initializer', 'A class descriptor');
    _disallowProperty(obj, 'extras', 'A class descriptor');
    var finisher = _optionalCallableProperty(obj, 'finisher');
    var elements = _toElementDescriptors(obj.elements);
    return { elements: elements, finisher: finisher };
}

function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) {
        throw new TypeError(
            objectType + " can't have a ." + name + ' property.'
        );
    }
}

function _optionalCallableProperty(obj, name) {
    var value = obj[name];
    if (value !== undefined && typeof value !== 'function') {
        throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
}

function _runClassFinishers(constructor, finishers) {
    for (var i = 0; i < finishers.length; i++) {
        var newConstructor = (0, finishers[i])(constructor);
        if (newConstructor !== undefined) {
            if (typeof newConstructor !== 'function') {
                throw new TypeError('Finishers must return a constructor.');
            }
            constructor = newConstructor;
        }
    }
    return constructor;
}

function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, 'string');
    return _typeof(key) === 'symbol' ? key : String(key);
}

function _toPrimitive(input, hint) {
    if (_typeof(input) !== 'object' || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || 'default');
        if (_typeof(res) !== 'object') return res;
        throw new TypeError('@@toPrimitive must return a primitive value.');
    }
    return (hint === 'string' ? String : Number)(input);
}

function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
}

function _iterableToArray(iter) {
    if (
        Symbol.iterator in Object(iter) ||
        Object.prototype.toString.call(iter) === '[object Arguments]'
    )
        return Array.from(iter);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}

function _asyncToGenerator(fn) {
    return function() {
        var self = this,
            args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'next',
                    value
                );
            }
            function _throw(err) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'throw',
                    err
                );
            }
            _next(undefined);
        });
    };
}

function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
            target[key] = source[key];
        }
    }
    return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

function _slicedToArray(arr, i) {
    return (
        _arrayWithHoles(arr) ||
        _iterableToArrayLimit(arr, i) ||
        _nonIterableRest()
    );
}

function _nonIterableRest() {
    throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for (
            var _i = arr[Symbol.iterator](), _s;
            !(_n = (_s = _i.next()).done);
            _n = true
        ) {
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally {
        try {
            if (!_n && _i['return'] != null) _i['return']();
        } finally {
            if (_d) throw _e;
        }
    }
    return _arr;
}

function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
        return call;
    }
    return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
        );
    }
    return self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError(
            'Super expression must either be null or a function'
        );
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}

function _wrapNativeSuper(Class) {
    var _cache = typeof Map === 'function' ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== 'function') {
            throw new TypeError(
                'Super expression must either be null or a function'
            );
        }
        if (typeof _cache !== 'undefined') {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(
                Class,
                arguments,
                _getPrototypeOf(this).constructor
            );
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}

function isNativeReflectConstruct() {
    if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === 'function') return true;
    try {
        Date.prototype.toString.call(
            Reflect.construct(Date, [], function() {})
        );
        return true;
    } catch (e) {
        return false;
    }
}

function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function _construct(Parent, args, Class) {
            var a = [null];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf('[native code]') !== -1;
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf =
        Object.setPrototypeOf ||
        function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
    return _setPrototypeOf(o, p);
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
          };
    return _getPrototypeOf(o);
}

var _module_ = {
    './component/InputComponent': {
        base: './component',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _DOM = require('../utility/DOM');

            var _Component = _interopRequireDefault(require('./Component'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var CSS_map = {
                    readonly: {
                        cursor: 'default'
                    },
                    disabled: {
                        cursor: 'not-allowed',
                        'point-events': 'none'
                    }
                },
                attributeChanged =
                    _Component.default.prototype.attributeChangedCallback;
            /**
             * Base class for Form field components
             */

            var InputComponent =
                /*#__PURE__*/
                (function(_HTMLElement) {
                    _inherits(InputComponent, _HTMLElement);

                    /**
                     * @param {?Object} option - https://developer.mozilla.org/en-US/docs/Web/API/element/attachShadow#Parameters
                     */
                    function InputComponent(option) {
                        var _this;

                        _classCallCheck(this, InputComponent);

                        (_this = _possibleConstructorReturn(
                            this,
                            _getPrototypeOf(InputComponent).call(this)
                        )).buildDOM(option);

                        return _this;
                    }
                    /**
                     * @protected
                     */

                    _createClass(InputComponent, [
                        {
                            key: 'slotChangedCallback',
                            value: function slotChangedCallback() {
                                var origin = this.$slot('input')[0];
                                if (!origin) return;
                                origin.style.setProperty(
                                    'display',
                                    'none',
                                    'important'
                                );

                                _DOM.watchAttributes.call(
                                    this,
                                    origin,
                                    [
                                        'type',
                                        'name',
                                        'value',
                                        'readonly',
                                        'disabled',
                                        'checked',
                                        'placeholder'
                                    ],
                                    this.changedPropertyOf
                                );

                                this.on(
                                    'input',
                                    ':host input[type="'.concat(
                                        origin.type,
                                        '"]'
                                    ),
                                    function(_ref) {
                                        var target = _ref.target;
                                        return (origin.value = target.value);
                                    }
                                ).on(
                                    'change',
                                    ':host input[type="'.concat(
                                        origin.type,
                                        '"]'
                                    ),
                                    this.trigger.bind(this)
                                );
                            }
                            /**
                             * Common behavior of Form field attributes
                             *
                             * @param {string}  attribute
                             * @param {?string} oldValue
                             * @param {?string} newValue
                             */
                        },
                        {
                            key: 'changedPropertyOf',
                            value: function changedPropertyOf(
                                attribute,
                                oldValue,
                                newValue
                            ) {
                                if (attribute === 'type' && !newValue)
                                    newValue = 'text';
                                newValue = attributeChanged.call(
                                    this.view,
                                    attribute,
                                    oldValue,
                                    newValue
                                );
                                var style = CSS_map[attribute];

                                if (style) {
                                    var _arr = Object.entries(style);

                                    for (var _i = 0; _i < _arr.length; _i++) {
                                        var _arr$_i = _slicedToArray(
                                                _arr[_i],
                                                2
                                            ),
                                            key = _arr$_i[0],
                                            value = _arr$_i[1];

                                        this.style[
                                            newValue
                                                ? 'setProperty'
                                                : 'removeProperty'
                                        ]('--input-'.concat(key), value);
                                    }
                                }
                            }
                            /**
                             * @type {string}
                             */
                        },
                        {
                            key: 'defaultValue',
                            get: function get() {
                                return this.getAttribute('value');
                            }
                        }
                    ]);

                    return InputComponent;
                })(_wrapNativeSuper(HTMLElement));

            exports.default = InputComponent;
        }
    },
    './utility/resource': {
        base: './utility',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.byteLength = byteLength;
            exports.isXDomain = isXDomain;
            exports.serialize = serialize;
            exports.stringify = stringify;
            exports.parse = parse;
            exports.fetch = fetch;
            exports.encodeBase64 = encodeBase64;
            exports.decodeBase64 = decodeBase64;
            exports.toDataURI = toDataURI;
            exports.blobOf = blobOf;
            exports.fileTypeOf = fileTypeOf;
            exports.blobFrom = blobFrom;
            exports.request = request;
            exports.readAs = readAs;

            var _DOM = require('./DOM');

            var _object = require('./object');
            /**
             * @param {String} raw
             *
             * @return {Number} Length in Half-width characters
             */

            function byteLength(raw) {
                return raw.replace(/[^\u0021-\u007e\uff61-\uffef]/g, 'xx')
                    .length;
            }
            /**
             * @param {string|URL} URI - Full URL of a resource
             *
             * @return {boolean} Whether it's cross domain to current page
             */

            function isXDomain(URI) {
                return (
                    new URL(URI, document.baseURI).origin !==
                    self.location.origin
                );
            }
            /**
             * @param {Element} form - `<form />` or `<fieldset />`
             *
             * @return {String|FormData|Object}
             */

            function serialize(form) {
                if ((0, _DOM.$)('input[type="file"][name]', form)[0])
                    return new FormData(form);
                var data = Array.from(form.elements, function(_ref2) {
                    var name = _ref2.name,
                        value = _ref2.value;
                    return name && [name, value];
                }).filter(Boolean);
                if (
                    (form.form || form).getAttribute('enctype') !==
                    'application/json'
                )
                    return '' + new URLSearchParams(data);
                form = {};
                data.forEach(function(_ref3) {
                    var _ref4 = _slicedToArray(_ref3, 2),
                        key = _ref4[0],
                        value = _ref4[1];

                    return (form[key] = value);
                });
                return form;
            }
            /**
             * @param {Object} data
             *
             * @return {String} JSON source code
             */

            function stringify(data) {
                return JSON.stringify(
                    data,
                    function(key, value) {
                        if (value instanceof Node)
                            return (0, _DOM.stringifyDOM)(value);
                        return value;
                    },
                    4
                );
            }
            /**
             * @param {String} raw - JSON source code
             *
             * @return {Object}
             */

            function parse(raw) {
                return JSON.parse(raw, function(key, value) {
                    if (
                        /^\d{4}(-\d{2}){2}T\d{2}(:\d{2}){2}\.\d{3}Z$/.test(
                            value
                        )
                    )
                        return new Date(value);

                    if (/<[\w-][\s\S]*?>/.test(value)) {
                        var node = (0, _DOM.parseDOM)(value);
                        return node.childNodes.length < 2
                            ? node.firstChild
                            : node;
                    }

                    return value;
                });
            }
            /**
             * Enhanced `fetch()` with **Progress handlers** based on `XMLHttpRequest()`
             *
             * @param {String|URL} URI
             *
             * @param {Object}        [request={ }]
             * @param {String}        [request.method='GET']
             * @param {String|Object} [request.body]
             * @param {Object}        [request.headers]
             * @param {Object}        [request.upload={ }]
             *     - [Event handlers of `XMLHttpRequestUpload()`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload)
             * @param {...Object}     [request.extra]
             *     - [Writable properties of XHR object](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Properties)
             *
             * @return {Promise<XMLHttpRequest>} Resolved on `load` event or
             *                                   Rejected on `error` event
             */

            function fetch(URI) {
                var _ref5 =
                        arguments.length > 1 && arguments[1] !== undefined
                            ? arguments[1]
                            : {},
                    _ref5$method = _ref5.method,
                    method = _ref5$method === void 0 ? 'GET' : _ref5$method,
                    body = _ref5.body,
                    headers = _ref5.headers,
                    _ref5$upload = _ref5.upload,
                    upload = _ref5$upload === void 0 ? {} : _ref5$upload,
                    extra = _objectWithoutProperties(_ref5, [
                        'method',
                        'body',
                        'headers',
                        'upload'
                    ]);

                var XHR = new XMLHttpRequest();
                if (extra) (0, _object.extend)(XHR, extra);
                if (upload) (0, _object.extend)(XHR.upload, upload);
                XHR.open(method, URI);

                for (var _key in headers) {
                    XHR.setRequestHeader(_key, headers[_key]);
                }

                return new Promise(function(resolve, reject) {
                    (XHR.onload = function(_ref6) {
                        var target = _ref6.target;
                        return resolve(target);
                    }),
                        (XHR.onerror = function(_ref7) {
                            var target = _ref7.target;
                            return reject(target);
                        });
                    XHR.send(body);
                });
            }
            /**
             * @param {String} raw - Binary data
             *
             * @return {String} Base64 encoded data
             */

            function encodeBase64(raw) {
                return self.btoa(
                    encodeURIComponent(raw).replace(/%([0-9A-F]{2})/g, function(
                        _,
                        p1
                    ) {
                        return String.fromCharCode('0x' + p1);
                    })
                );
            }
            /**
             * @param {String} raw - Base64 encoded data
             *
             * @return {String} Binary data
             */

            function decodeBase64(raw) {
                return decodeURIComponent(
                    self
                        .atob(raw)
                        .split('')
                        .map(function(char) {
                            return (
                                '%' +
                                ('00' + char.charCodeAt(0).toString(16)).slice(
                                    -2
                                )
                            );
                        })
                        .join('')
                );
            }
            /**
             * @param {String} raw       - Binary data
             * @param {String} [type=''] - MIME type
             *
             * @return {String}
             */

            function toDataURI(raw) {
                var type =
                    arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : '';
                return 'data:'
                    .concat(type, ';base64,')
                    .concat(encodeBase64(raw));
            }
            /**
             * @param {String} URI - Returned by `URL.createObjectURL()`
             *
             * @return {Promise<Blob>}
             */

            function blobOf(_x) {
                return _blobOf.apply(this, arguments);
            }

            function _blobOf() {
                _blobOf = _asyncToGenerator(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee(URI) {
                        return regeneratorRuntime.wrap(
                            function _callee$(_context) {
                                while (1) {
                                    switch ((_context.prev = _context.next)) {
                                        case 0:
                                            _context.next = 2;
                                            return fetch(URI, {
                                                responseType: 'blob'
                                            });

                                        case 2:
                                            return _context.abrupt(
                                                'return',
                                                _context.sent.response
                                            );

                                        case 3:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            },
                            _callee,
                            this
                        );
                    })
                );
                return _blobOf.apply(this, arguments);
            }

            var schema_type = /^(?:(\w+):)?.+?(?:\.(\w+))?$/,
                DataURI = /^data:(.+?\/(.+?))?(;base64)?,(\S+)/;
            /**
             * @param {String} URI - HTTP(S) URL, Data URI or Object URL
             *
             * @return   {Object}
             * @property {String} schema - URI schema (`http`, `https`, `data` or `blob`)
             * @property {String} type   - File type (same as the Extension name of a file)
             */

            function fileTypeOf(_x2) {
                return _fileTypeOf.apply(this, arguments);
            }
            /**
             * @param {String} URI - Data URI
             *
             * @return {Blob}
             */

            function _fileTypeOf() {
                _fileTypeOf = _asyncToGenerator(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee2(URI) {
                        var _ref10, _ref11, _, schema, type, blob;

                        return regeneratorRuntime.wrap(
                            function _callee2$(_context2) {
                                while (1) {
                                    switch ((_context2.prev = _context2.next)) {
                                        case 0:
                                            (_ref10 =
                                                schema_type.exec(URI) || []),
                                                (_ref11 = _slicedToArray(
                                                    _ref10,
                                                    3
                                                )),
                                                (_ = _ref11[0]),
                                                (schema = _ref11[1]),
                                                (type = _ref11[2]); // eslint-disable-line

                                            _context2.t0 = schema;
                                            _context2.next =
                                                _context2.t0 === 'data'
                                                    ? 4
                                                    : _context2.t0 === 'blob'
                                                    ? 5
                                                    : 9;
                                            break;

                                        case 4:
                                            return _context2.abrupt('return', {
                                                schema: 'data',
                                                type: DataURI.exec(URI)[2]
                                            });

                                        case 5:
                                            _context2.next = 7;
                                            return blobOf(URI);

                                        case 7:
                                            blob = _context2.sent;
                                            return _context2.abrupt('return', {
                                                schema: 'blob',
                                                type: blob.type
                                            });

                                        case 9:
                                            return _context2.abrupt('return', {
                                                schema: schema,
                                                type: type
                                            });

                                        case 10:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            },
                            _callee2,
                            this
                        );
                    })
                );
                return _fileTypeOf.apply(this, arguments);
            }

            function blobFrom(URI) {
                var _ref8 = DataURI.exec(URI) || [],
                    _ref9 = _slicedToArray(_ref8, 5),
                    _ = _ref9[0],
                    type = _ref9[1],
                    __ = _ref9[2],
                    base64 = _ref9[3],
                    data = _ref9[4]; // eslint-disable-line

                data = base64 ? self.atob(data) : data;
                var aBuffer = new ArrayBuffer(data.length);
                var uBuffer = new Uint8Array(aBuffer);

                for (var _i2 = 0; data[_i2]; _i2++) {
                    uBuffer[_i2] = data.charCodeAt(_i2);
                }

                return new Blob([aBuffer], {
                    type: type
                });
            }
            /**
             * HTTP request
             *
             * @param {string}                URI            - HTTP URL
             * @param {string}                [method='GET']
             * @param {string|Object|Element} [body]         - Data to send
             * @param {Object}                [headers]
             * @param {Object}                [option]       - Parameters of {@link fetch} about `XMLHttpRequest()`
             *
             * @return {string|Object|DocumentFragment|Blob} Parse response data automatically
             */

            function request(_x3) {
                return _request.apply(this, arguments);
            }
            /**
             * @param {File}   file
             * @param {String} [type='DataURL']   - https://developer.mozilla.org/en-US/docs/Web/API/FileReader#Methods
             * @param {String} [encoding='UTF-8'] - https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText#Parameters
             *
             * @return {String|ArrayBuffer}
             */

            function _request() {
                _request = _asyncToGenerator(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee3(URI) {
                        var method,
                            body,
                            headers,
                            option,
                            XHR,
                            type,
                            _args3 = arguments;
                        return regeneratorRuntime.wrap(
                            function _callee3$(_context3) {
                                while (1) {
                                    switch ((_context3.prev = _context3.next)) {
                                        case 0:
                                            method =
                                                _args3.length > 1 &&
                                                _args3[1] !== undefined
                                                    ? _args3[1]
                                                    : 'GET';
                                            body =
                                                _args3.length > 2
                                                    ? _args3[2]
                                                    : undefined;
                                            headers =
                                                _args3.length > 3
                                                    ? _args3[3]
                                                    : undefined;
                                            option =
                                                _args3.length > 4
                                                    ? _args3[4]
                                                    : undefined;
                                            if (body instanceof Element)
                                                body = serialize(body);
                                            if (body instanceof Object)
                                                try {
                                                    body = stringify(
                                                        body.valueOf()
                                                    );
                                                    headers = headers || {};
                                                    headers['Content-Type'] =
                                                        headers[
                                                            'Content-Type'
                                                        ] || 'application/json';
                                                } catch (error) {
                                                    /* eslint-disable-line */
                                                }
                                            _context3.next = 8;
                                            return fetch(
                                                URI,
                                                Object.assign(
                                                    {
                                                        method: method,
                                                        headers: headers,
                                                        body: body
                                                    },
                                                    option
                                                )
                                            );

                                        case 8:
                                            XHR = _context3.sent;
                                            type = XHR.getResponseHeader(
                                                'Content-Type'
                                            ).split(';')[0];
                                            _context3.t0 = type;
                                            _context3.next =
                                                _context3.t0 ===
                                                'application/xml'
                                                    ? 13
                                                    : _context3.t0 ===
                                                      'image/svg'
                                                    ? 13
                                                    : _context3.t0 ===
                                                      'text/html'
                                                    ? 14
                                                    : _context3.t0 ===
                                                      'application/json'
                                                    ? 15
                                                    : 16;
                                            break;

                                        case 13:
                                            return _context3.abrupt(
                                                'return',
                                                XHR.responseXML
                                            );

                                        case 14:
                                            return _context3.abrupt(
                                                'return',
                                                (0, _DOM.parseDOM)(
                                                    XHR.responseText
                                                )
                                            );

                                        case 15:
                                            return _context3.abrupt(
                                                'return',
                                                parse(XHR.responseText)
                                            );

                                        case 16:
                                            return _context3.abrupt(
                                                'return',
                                                type.split('/')[0] === 'text'
                                                    ? XHR.responseText
                                                    : blobFrom(
                                                          toDataURI(
                                                              XHR.response
                                                          )
                                                      )
                                            );

                                        case 17:
                                        case 'end':
                                            return _context3.stop();
                                    }
                                }
                            },
                            _callee3,
                            this
                        );
                    })
                );
                return _request.apply(this, arguments);
            }

            function readAs(file) {
                var type =
                    arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : 'DataURL';
                var encoding =
                    arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : 'UTF-8';
                var reader = new FileReader();
                return new Promise(function(resolve, reject) {
                    reader.onload = function() {
                        return resolve(reader.result);
                    };

                    reader.onerror = reject;
                    reader['readAs'.concat(type)](file, encoding);
                });
            }
        }
    },
    './view/ArrayView': {
        base: './view',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _object = require('../utility/object');

            var _View = _interopRequireDefault(require('./View'));

            var _DOM = require('../utility/DOM');

            var _ObjectView = _interopRequireDefault(require('./ObjectView'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var Array_find = [].find,
                Array_indexOf = [].indexOf;

            var /**
                 * View for Array model
                 */
                ArrayView = _decorate(
                    [_object.arrayLike],
                    function(_initialize, _View$default) {
                        var ArrayView =
                            /*#__PURE__*/
                            (function(_View$default2) {
                                _inherits(ArrayView, _View$default2);

                                /**
                                 * @param {Element} element
                                 * @param {View}    [parent]
                                 */
                                function ArrayView(element, parent) {
                                    var _this2;

                                    _classCallCheck(this, ArrayView);

                                    _this2 = _possibleConstructorReturn(
                                        this,
                                        _getPrototypeOf(ArrayView).call(
                                            this,
                                            element,
                                            'array',
                                            [],
                                            parent
                                        )
                                    );

                                    _initialize(
                                        _assertThisInitialized(
                                            _assertThisInitialized(_this2)
                                        )
                                    );

                                    if (_this2.booted)
                                        return _possibleConstructorReturn(
                                            _this2
                                        );
                                    var template = Array_find.call(
                                        element.childNodes,
                                        function(node) {
                                            return (
                                                node.nodeType === 8 ||
                                                node.tagName === 'TEMPLATE'
                                            );
                                        }
                                    );
                                    _this2.template =
                                        template.nodeType === 1
                                            ? (0, _DOM.stringifyDOM)(
                                                  template.content
                                              )
                                            : template.nodeValue;

                                    _this2.clear();

                                    return _this2;
                                }

                                return ArrayView;
                            })(_View$default);

                        return {
                            F: ArrayView,
                            d: [
                                {
                                    kind: 'method',
                                    key: 'clear',
                                    value: function value() {
                                        Array.prototype.splice.call(
                                            this,
                                            0,
                                            Infinity
                                        );
                                        this.content.innerHTML = '';
                                        return this;
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'valueOf',
                                    value: function value() {
                                        return Array.from(this, function(view) {
                                            return view.valueOf();
                                        });
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'update',
                                    value: function value() {
                                        var _iteratorNormalCompletion = true;
                                        var _didIteratorError = false;
                                        var _iteratorError = undefined;

                                        try {
                                            for (
                                                var _iterator = this[
                                                        Symbol.iterator
                                                    ](),
                                                    _step;
                                                !(_iteratorNormalCompletion = (_step = _iterator.next())
                                                    .done);
                                                _iteratorNormalCompletion = true
                                            ) {
                                                var view = _step.value;
                                                view.render();
                                            }
                                        } catch (err) {
                                            _didIteratorError = true;
                                            _iteratorError = err;
                                        } finally {
                                            try {
                                                if (
                                                    !_iteratorNormalCompletion &&
                                                    _iterator.return != null
                                                ) {
                                                    _iterator.return();
                                                }
                                            } finally {
                                                if (_didIteratorError) {
                                                    throw _iteratorError;
                                                }
                                            }
                                        }

                                        return this;
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'render',
                                    value: function value(list) {
                                        var _this$content,
                                            _this3 = this;

                                        if (!list) return this.update();
                                        var data = this.data;

                                        (_this$content = this
                                            .content).append.apply(
                                            _this$content,
                                            _toConsumableArray(
                                                (0, _object.multipleMap)(
                                                    list,
                                                    function(item) {
                                                        var view = (_this3[
                                                            _this3.length++
                                                        ] = new _ObjectView.default(
                                                            _this3.template,
                                                            _this3
                                                        ));
                                                        data[data.length] =
                                                            view.data;
                                                        if (
                                                            !(
                                                                item.index !=
                                                                null
                                                            )
                                                        )
                                                            Object.defineProperty(
                                                                item,
                                                                'index',
                                                                {
                                                                    get: function get() {
                                                                        return data.indexOf(
                                                                            this
                                                                        );
                                                                    },
                                                                    enumerable: true
                                                                }
                                                            );
                                                        return view.render(item)
                                                            .content;
                                                    }
                                                )
                                            )
                                        );

                                        return this;
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'push',
                                    value: function value() {
                                        for (
                                            var _len = arguments.length,
                                                item = new Array(_len),
                                                _key2 = 0;
                                            _key2 < _len;
                                            _key2++
                                        ) {
                                            item[_key2] = arguments[_key2];
                                        }

                                        return this.render(item).length;
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'indexOf',
                                    value: function value(view, start) {
                                        return Array_indexOf.call(
                                            this,
                                            view,
                                            start
                                        );
                                    }
                                }
                            ]
                        };
                    },
                    _View.default
                );

            exports.default = ArrayView;
        }
    },
    './view/Template': {
        base: './view',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _object = require('../utility/object');

            var /**
                 * String template
                 */
                Template = _decorate([_object.arrayLike], function(
                    _initialize2
                ) {
                    var Template =
                        /**
                         * @param {string}          raw
                         * @param {stirng[]}        [varName]  - Name list of the Local variable
                         * @param {ChangedCallback} [onChange] - Call with New & Old value
                         * @param {Array}           [bindData] - The parameter bound to `onChange`
                         */
                        function Template(raw, varName, onChange, bindData) {
                            _classCallCheck(this, Template);

                            _initialize2(this);

                            this.length = 0;
                            this.raw = raw;
                            /**
                             * Last evaluated value
                             *
                             * @type {*}
                             */

                            this.value = null;
                            if (varName instanceof Function)
                                (bindData = onChange),
                                    (onChange = varName),
                                    (varName = null);
                            this.varName = varName || [];
                            /**
                             * Reference map of contexts
                             *
                             * @type {Map}
                             */

                            this.reference = new Map();
                            var _iteratorNormalCompletion2 = true;
                            var _didIteratorError2 = false;
                            var _iteratorError2 = undefined;

                            try {
                                for (
                                    var _iterator2 = ['this']
                                            .concat(this.varName)
                                            [Symbol.iterator](),
                                        _step2;
                                    !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                                        .done);
                                    _iteratorNormalCompletion2 = true
                                ) {
                                    var scope = _step2.value;
                                    this.reference.set(scope, []);
                                }
                            } catch (err) {
                                _didIteratorError2 = true;
                                _iteratorError2 = err;
                            } finally {
                                try {
                                    if (
                                        !_iteratorNormalCompletion2 &&
                                        _iterator2.return != null
                                    ) {
                                        _iterator2.return();
                                    }
                                } finally {
                                    if (_didIteratorError2) {
                                        throw _iteratorError2;
                                    }
                                }
                            }

                            this.onChange =
                                onChange instanceof Function ? onChange : null;
                            this.data = bindData || [];
                            this.parse();
                            if (this[0]) this.clear();
                        };
                    /**
                     * @type {RegExp}
                     */
                    return {
                        F: Template,
                        d: [
                            {
                                kind: 'get',
                                static: true,
                                key: 'Expression',
                                value: function value() {
                                    return /\$\{([\s\S]+?)\}/g;
                                }
                            },
                            {
                                kind: 'get',
                                static: true,
                                key: 'Reference',
                                value: function value() {
                                    return /(\w+)(?:\.(\w+)|\[(?:'([^']+)|"([^"]+)))/g;
                                }
                            },
                            {
                                kind: 'method',
                                key: 'push',
                                value: function value() {
                                    return Array.prototype.push.apply(
                                        this,
                                        arguments
                                    );
                                }
                            },
                            {
                                kind: 'method',
                                key: 'compile',
                                value: function value(expression) {
                                    this[this.length++] = _construct(
                                        Function,
                                        _toConsumableArray(this.varName).concat(
                                            ['return ' + expression.trim()]
                                        )
                                    );
                                    return this.length - 1;
                                }
                            },
                            {
                                kind: 'method',
                                key: 'parse',
                                value: function value() {
                                    var _this4 = this;

                                    var addReference = function addReference(
                                        match,
                                        context,
                                        key1,
                                        key2,
                                        key3
                                    ) {
                                        if (_this4.reference.has(context))
                                            _this4.reference
                                                .get(context)
                                                .push(key1 || key2 || key3);
                                    };

                                    this.raw = this.raw.replace(
                                        Template.Expression,
                                        function(_, expression) {
                                            expression.replace(
                                                Template.Reference,
                                                addReference
                                            );
                                            return (
                                                '${' +
                                                _this4.compile(expression) +
                                                '}'
                                            );
                                        }
                                    );
                                    return this;
                                }
                            },
                            {
                                kind: 'method',
                                key: 'eval',
                                value: function value(
                                    index,
                                    context,
                                    parameter
                                ) {
                                    try {
                                        var value = this[index].apply(
                                            context,
                                            parameter
                                        );
                                        return value != null ? value : '';
                                    } catch (error) {
                                        if (this.value !== null)
                                            console.warn(error);
                                        return '';
                                    }
                                }
                            },
                            {
                                kind: 'method',
                                key: 'evaluate',
                                value: function value(context) {
                                    var _this5 = this;

                                    for (
                                        var _len2 = arguments.length,
                                            parameter = new Array(
                                                _len2 > 1 ? _len2 - 1 : 0
                                            ),
                                            _key3 = 1;
                                        _key3 < _len2;
                                        _key3++
                                    ) {
                                        parameter[_key3 - 1] = arguments[_key3];
                                    }

                                    var value =
                                        this.raw !== '${0}'
                                            ? this.raw.replace(
                                                  /\$\{(\d+)\}/g,
                                                  function(_, index) {
                                                      return _this5.eval(
                                                          index,
                                                          context,
                                                          parameter
                                                      );
                                                  }
                                              )
                                            : this.eval(0, context, parameter);

                                    if (value !== this.value) {
                                        /**
                                         * Call back only on Value changed
                                         *
                                         * @typedef {function} ChangedCallback
                                         *
                                         * @param {*}    newValue
                                         * @param {*}    oldValue
                                         * @param {...*} bindData
                                         */
                                        if (this.onChange)
                                            this.onChange.apply(
                                                this,
                                                _toConsumableArray(
                                                    [value, this.value].concat(
                                                        this.data
                                                    )
                                                )
                                            );
                                        this.value = value;
                                    }

                                    return value;
                                }
                            },
                            {
                                kind: 'method',
                                key: 'clear',
                                value: function value() {
                                    return this.evaluate.apply(
                                        this,
                                        _toConsumableArray(
                                            Array.from(
                                                this.reference.entries(),
                                                function(entry) {
                                                    var data = {};
                                                    var _iteratorNormalCompletion3 = true;
                                                    var _didIteratorError3 = false;
                                                    var _iteratorError3 = undefined;

                                                    try {
                                                        for (
                                                            var _iterator3 = entry[1][
                                                                    Symbol
                                                                        .iterator
                                                                ](),
                                                                _step3;
                                                            !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next())
                                                                .done);
                                                            _iteratorNormalCompletion3 = true
                                                        ) {
                                                            var _key4 =
                                                                _step3.value;
                                                            data[_key4] = '';
                                                        }
                                                    } catch (err) {
                                                        _didIteratorError3 = true;
                                                        _iteratorError3 = err;
                                                    } finally {
                                                        try {
                                                            if (
                                                                !_iteratorNormalCompletion3 &&
                                                                _iterator3.return !=
                                                                    null
                                                            ) {
                                                                _iterator3.return();
                                                            }
                                                        } finally {
                                                            if (
                                                                _didIteratorError3
                                                            ) {
                                                                throw _iteratorError3;
                                                            }
                                                        }
                                                    }

                                                    return data;
                                                }
                                            )
                                        )
                                    );
                                }
                            },
                            {
                                kind: 'method',
                                key: 'toString',
                                value: function value() {
                                    return this.value + '';
                                }
                            }
                        ]
                    };
                });

            exports.default = Template;
        }
    },
    './utility/DOM': {
        base: './utility',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.$ = $;
            exports.$up = $up;
            exports.mediaReady = mediaReady;
            exports.indexOf = indexOf;
            exports.targetOf = targetOf;
            exports.delegate = delegate;
            exports.trigger = trigger;
            exports.watchInput = watchInput;
            exports.parseDOM = parseDOM;
            exports.isHTML = isHTML;
            exports.stringifyDOM = stringifyDOM;
            exports.encodeMarkup = encodeMarkup;
            exports.decodeMarkup = decodeMarkup;
            exports.watchAttributes = watchAttributes;
            exports.delay = delay;
            exports.nextTick = nextTick;
            exports.documentReady = void 0;

            var _object = require('./object');

            var _Template = _interopRequireDefault(require('../view/Template'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * @type {Promise}
             */

            var documentReady = new Promise(function(resolve) {
                document.addEventListener('DOMContentLoaded', resolve);
                self.addEventListener('load', resolve);

                (function check() {
                    document.readyState === 'complete'
                        ? resolve()
                        : setTimeout(check);
                })();
            });
            /**
             * jQuery-like selector
             *
             * @param {string}                            selector
             * @param {Element|Document|DocumentFragment} [context=document]
             *
             * @return {Element[]}
             */

            exports.documentReady = documentReady;

            function $(selector, context) {
                return Array.from(
                    (context || document).querySelectorAll(selector)
                );
            }
            /**
             * @param {string}                    selector    - CSS selector
             * @param {Node}                      context
             * @param {function(parent: Node): *} [condition]
             *
             * @return {?Node} Matched parent
             */

            function $up(selector, context, condition) {
                condition = condition instanceof Function && condition;

                while ((context = context.parentNode)) {
                    if (condition) {
                        var result = condition(context);
                        if (result) return result === true ? context : result;
                    } else if (context.matches && context.matches(selector))
                        return context;
                }
            }

            function mediaLoad(media, condition) {
                return new Promise(function(resolve, reject) {
                    if (condition()) resolve();
                    else (media.onload = resolve), (media.onerror = reject);
                });
            }
            /**
             * @param {Element|Document} [context]
             *
             * @return {Promise} Resolved when all media elements in `context` are loaded
             */

            function mediaReady(context) {
                return Promise.all(
                    $(
                        'img[src], iframe[src], audio[src], video[src]',
                        context
                    ).map(function(media) {
                        if (
                            _Template.default.Expression.test(
                                media.getAttribute('src')
                            )
                        )
                            return;

                        switch (media.tagName.toLowerCase()) {
                            case 'img':
                                return mediaLoad(media, function() {
                                    return media.complete;
                                });

                            case 'iframe':
                                return new Promise(function(resolve, reject) {
                                    try {
                                        if (
                                            media.contentDocument.readyState ===
                                            'complete'
                                        )
                                            resolve();
                                        else
                                            (media.onload = resolve),
                                                (media.onerror = reject);
                                    } catch (error) {
                                        resolve();
                                    }
                                });

                            case 'audio':
                            case 'video':
                                return mediaLoad(media, function() {
                                    return media.readyState > 0;
                                });
                        }
                    })
                );
            }
            /**
             * @param {Element} element
             *
             * @return {number} The index of `element` in its siblings
             */

            function indexOf(element) {
                var index = 0;

                while ((element = element.previousElementSibling)) {
                    index++;
                }

                return index;
            }
            /**
             * @param {Event} event
             *
             * @return {Element} The target of `event` object (**Shadow DOM** is in account)
             */

            function targetOf(event) {
                var target = event.composedPath
                    ? event.composedPath()
                    : event.path;
                return (target || '')[0] || event.target;
            }
            /**
             * DOM event delegate
             *
             * @param {string}          selector
             * @param {DOMEventHandler} handler
             *
             * @return {Function} Handler wrapper
             */

            function delegate(selector, handler) {
                return function(event) {
                    var target = targetOf(event);
                    if (!target.matches(selector))
                        target = $up(selector, target);
                    if (target)
                        return handler.call(
                            target,
                            event,
                            target,
                            event.detail
                        );
                };
            }
            /**
             * @param {Element}      element
             * @param {String|Event} event
             * @param {?*}           detail     - Additional data
             * @param {?Boolean}     bubbles
             * @param {?Boolean}     cancelable
             * @param {?Boolean}     composed   - Whether the event will cross
             *                                    from the shadow DOM into the standard DOM
             *                                    after reaching the shadow root
             * @return {Boolean} Event be canceled or not
             */

            function trigger(
                element,
                event,
                detail,
                bubbles,
                cancelable,
                composed
            ) {
                return element.dispatchEvent(
                    event instanceof Event
                        ? new event.constructor(event.type, {
                              bubbles: event.bubbles,
                              cancelable: event.cancelable
                          })
                        : new CustomEvent(event, {
                              bubbles: bubbles,
                              cancelable: cancelable,
                              composed: composed,
                              detail: detail
                          })
                );
            }

            var CustomInputEvent =
                /*#__PURE__*/
                (function(_CustomEvent) {
                    _inherits(CustomInputEvent, _CustomEvent);

                    function CustomInputEvent() {
                        _classCallCheck(this, CustomInputEvent);

                        return _possibleConstructorReturn(
                            this,
                            _getPrototypeOf(CustomInputEvent).apply(
                                this,
                                arguments
                            )
                        );
                    }

                    _createClass(CustomInputEvent, [
                        {
                            key: 'target',
                            get: function get() {
                                return $up(
                                    '*',
                                    _get(
                                        _getPrototypeOf(
                                            CustomInputEvent.prototype
                                        ),
                                        'target',
                                        this
                                    ),
                                    function(node) {
                                        return (
                                            node instanceof DocumentFragment &&
                                            node.host
                                        );
                                    }
                                );
                            }
                        }
                    ]);

                    return CustomInputEvent;
                })(_wrapNativeSuper(CustomEvent));

            function customInput(element, detail) {
                element.dispatchEvent(
                    new CustomInputEvent('input', {
                        bubbles: true,
                        composed: true,
                        detail: detail
                    })
                );
            }
            /**
             * @param {HTMLElement} element
             */

            function watchInput(element) {
                var IME, clipBoard;
                element.addEventListener('compositionstart', function() {
                    return (IME = true);
                });
                element.addEventListener('compositionend', function(_ref12) {
                    var target = _ref12.target,
                        data = _ref12.data;
                    return (IME = false), customInput(target, data);
                });
                element.addEventListener('input', function(_ref13) {
                    var target = _ref13.target,
                        data = _ref13.data;
                    if (clipBoard) clipBoard = false;
                    else if (!IME) customInput(target, data);
                });
                element.addEventListener('paste', function(_ref14) {
                    var target = _ref14.target,
                        clipboardData = _ref14.clipboardData;
                    if (!IME)
                        (clipBoard = true),
                            customInput(target, clipboardData.getData('text'));
                });
                element.addEventListener('cut', function(_ref15) {
                    var target = _ref15.target;
                    if (!IME) (clipBoard = true), customInput(target);
                });
            }
            /**
             * @param {string} markup - Code of an markup fragment
             *
             * @return {DocumentFragment|Document}
             */

            function parseDOM(markup) {
                if (/<(!DocType|html|head|body)[\s\S]*?>/.test(markup))
                    return new DOMParser().parseFromString(markup, 'text/html');
                var box = document.createElement('template');
                box.innerHTML = markup;
                return box.content;
            }
            /**
             * @param {*} DOM
             *
             * @return {Boolean}
             */

            function isHTML(DOM) {
                return (
                    DOM instanceof HTMLDocument ||
                    DOM instanceof DocumentFragment ||
                    DOM instanceof HTMLElement
                );
            }

            var serializer = new XMLSerializer(),
                documentXML = document.implementation.createDocument(
                    null,
                    'xml'
                );

            function stringOf(document) {
                if (document instanceof HTMLDocument)
                    $(
                        'style:not(:empty), script:not(:empty)',
                        document
                    ).forEach(function(_ref16) {
                        var textContent = _ref16.textContent,
                            firstChild = _ref16.firstChild;
                        return (
                            textContent.trim() &&
                            firstChild.replaceWith(
                                documentXML.createCDATASection(textContent)
                            )
                        );
                    });
                return serializer.serializeToString(document);
            }
            /**
             * @param {Node|Node[]} fragment
             *
             * @return {string} HTML/XML source code
             */

            function stringifyDOM(fragment) {
                if ((0, _object.likeArray)(fragment)) {
                    var node = document.createDocumentFragment();
                    node.append.apply(
                        node,
                        Array.from(fragment, function(item) {
                            return item.cloneNode(true);
                        })
                    );
                    fragment = node;
                }

                if (fragment instanceof HTMLDocument || !isHTML(fragment))
                    return stringOf(fragment);
                if (fragment instanceof HTMLElement) return fragment.outerHTML;
                var box = document.createElement('template');
                box.content.append(fragment.cloneNode(true));
                return box.innerHTML;
            }

            var sandbox = document.createElement('div');
            /**
             * @param {String} source - Markup source code
             *
             * @return {String} Special characters are tranformed to Markup entries
             */

            function encodeMarkup(source) {
                sandbox.textContent = source;
                return sandbox.innerHTML;
            }
            /**
             * @param {String} source
             *
             * @return {String} Markup entries are tranformed back to Special characters or
             *                  Escape Markup tags
             */

            function decodeMarkup(source) {
                sandbox.innerHTML = source;
                return sandbox.textContent;
            }
            /**
             * @typedef {Function} AttributeWatcher
             *
             * @param {string}  name
             * @param {?string} oldValue
             * @param {?string} newValue
             */

            /**
             * @param {Element}          element
             * @param {string[]}         names
             * @param {AttributeWatcher} callback
             *
             * @return {MutationObserver}
             */

            function watchAttributes(element, names, callback) {
                var _this6 = this;

                var observer = new MutationObserver(function(list) {
                    return list.forEach(function(_ref17) {
                        var attributeName = _ref17.attributeName,
                            oldValue = _ref17.oldValue;
                        return callback.call(
                            _this6,
                            attributeName,
                            oldValue,
                            element.getAttribute(attributeName)
                        );
                    });
                });
                observer.observe(element, {
                    attributes: true,
                    attributeOldValue: true,
                    attributeFilter: names
                });
                Array.from(element.attributes, function(_ref18) {
                    var name = _ref18.name,
                        value = _ref18.value;
                    return callback.call(_this6, name, null, value);
                });
                return observer;
            }
            /**
             * @param {number} [second=0]
             *
             * @return {Promise} Wait seconds in Macro tasks
             */

            function delay(second) {
                return new Promise(function(resolve) {
                    return setTimeout(resolve, (second || 0) * 1000);
                });
            }

            var tick;
            /**
             * @return {Promise<number>} [Time stamp](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp)
             */

            function nextTick() {
                return (
                    tick ||
                    (tick = new Promise(function(resolve) {
                        return self.requestAnimationFrame(function(time) {
                            return (tick = null), resolve(time);
                        });
                    }))
                );
            }
        }
    },
    './view/View': {
        base: './view',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _DOM = require('../utility/DOM');

            var _object = require('../utility/object');

            var view_DOM = new WeakMap(),
                DOM_view = new WeakMap();
            var view_data = new WeakMap(),
                view_parent = new WeakMap();
            /**
             * Abstract View
             */

            var View =
                /*#__PURE__*/
                (function() {
                    /**
                     * @param {string|Element|DocumentFragment} template
                     * @param {string}                          nameKey  - Key (littleCamelCase) of HTML `data-*`
                     *                                                     to get name of bound data
                     * @param {Object}                          data     - Empty Model for this view
                     * @param {View}                            [parent] - Parent view in the DOM tree
                     */
                    function View(template, nameKey, data, parent) {
                        _classCallCheck(this, View);

                        if (this.constructor === View)
                            throw TypeError('"View" is an abstract class');

                        switch (template.nodeType) {
                            case 1:
                                this.name = template.dataset[nameKey];
                                break;

                            case 11:
                                if (!(template.parentNode || template.host))
                                    template = template.childNodes;
                                break;

                            default:
                                template = (0, _DOM.parseDOM)(template)
                                    .childNodes;
                        }

                        var _this_ = this.bindWith(template);

                        if (_this_ !== this) {
                            _this_.booted = true;
                            return _this_;
                        }

                        view_data.set(this, data),
                            view_parent.set(this, parent);
                    }
                    /**
                     * @protected
                     *
                     * @param {Element|Element[]|DocumentFragment} template
                     *
                     * @return {View} This view or the view bound before
                     */

                    _createClass(
                        View,
                        [
                            {
                                key: 'bindWith',
                                value: function bindWith(template) {
                                    var _this7 = this;

                                    var _this_;

                                    if ((0, _object.likeArray)(template))
                                        template = (0, _object.multipleMap)(
                                            template,
                                            function(node) {
                                                switch (node.nodeType) {
                                                    case 1:
                                                        if (
                                                            !(_this_ = DOM_view.get(
                                                                node
                                                            ))
                                                        )
                                                            DOM_view.set(
                                                                node,
                                                                _this7
                                                            );
                                                        break;

                                                    case 3:
                                                        if (
                                                            !node.nodeValue.trim()
                                                        )
                                                            return;
                                                }

                                                return node;
                                            }
                                        );
                                    else if (!(_this_ = DOM_view.get(template)))
                                        DOM_view.set(template, this);
                                    view_DOM.set(this, template);
                                    return _this_ || this;
                                }
                                /**
                                 * @param {Element|DocumentFragment} node
                                 *
                                 * @return {View} View instance bound with `node`
                                 */
                            },
                            {
                                key: 'toString',

                                /**
                                 * @return {string} Full markup code of this view
                                 */
                                value: function toString() {
                                    return (0, _DOM.stringifyDOM)(this.content);
                                }
                                /**
                                 * @protected
                                 *
                                 * @type {Object}
                                 */
                            },
                            {
                                key: 'valueOf',

                                /**
                                 * Get original data of this view
                                 *
                                 * @abstract
                                 *
                                 * @return {Object}
                                 */
                                value: function valueOf() {
                                    throw TypeError(
                                        'View.prototype.valueOf() must be overwriten'
                                    );
                                }
                                /**
                                 * Render this view with data or Update without data
                                 *
                                 * @abstract
                                 *
                                 * @return {View}
                                 */
                            },
                            {
                                key: 'render',
                                value: function render() {
                                    throw TypeError(
                                        'View.prototype.render() must be overwriten'
                                    );
                                }
                                /**
                                 * Reset this view to empty data
                                 *
                                 * @abstract
                                 *
                                 * @return {View}
                                 */
                            },
                            {
                                key: 'clear',
                                value: function clear() {
                                    throw TypeError(
                                        'View.prototype.clear() must be overwriten'
                                    );
                                }
                            },
                            {
                                key: 'content',

                                /**
                                 * @type {Element|Element[]|DocumentFragment}
                                 */
                                get: function get() {
                                    return view_DOM.get(this);
                                }
                            },
                            {
                                key: 'data',
                                get: function get() {
                                    return view_data.get(this);
                                }
                                /**
                                 * Parent view in current DOM tree
                                 *
                                 * @type {?View}
                                 */
                            },
                            {
                                key: 'parent',
                                get: function get() {
                                    var view = view_parent.get(this);
                                    if (view instanceof View) return view;
                                    var node = this.content[0] || this.content;

                                    while ((node = node.parentNode)) {
                                        if ((view = View.instanceOf(node)))
                                            return (
                                                view_parent.set(this, view) &&
                                                view
                                            );
                                    }
                                }
                                /**
                                 * @protected
                                 *
                                 * @type {?Object}
                                 */
                            },
                            {
                                key: 'scope',
                                get: function get() {
                                    return (this.parent || '').data;
                                }
                                /**
                                 * Host element of a view in a Shadow DOM tree
                                 *
                                 * @type {?Element}
                                 */
                            },
                            {
                                key: 'rootHost',
                                get: function get() {
                                    var view = this;

                                    while (view.parent) {
                                        view = view.parent;
                                    }

                                    return view.content.host;
                                }
                            }
                        ],
                        [
                            {
                                key: 'instanceOf',
                                value: function instanceOf(node) {
                                    return DOM_view.get(node);
                                }
                            }
                        ]
                    );

                    return View;
                })();

            exports.default = View;
        }
    },
    './utility/object': {
        base: './utility',
        dependency: [],
        factory: function factory(require, exports, module) {
            var _marked =
                /*#__PURE__*/
                regeneratorRuntime.mark(mapTree);

            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.classNameOf = classNameOf;
            exports.getPropertyDescriptor = getPropertyDescriptor;
            exports.decoratorOf = decoratorOf;
            exports.likeArray = likeArray;
            exports.toIterable = toIterable;
            exports.arrayLike = arrayLike;
            exports.multipleMap = multipleMap;
            exports.unique = unique;
            exports.extend = extend;
            exports.mapTree = mapTree;
            /**
             * @param {*} object
             *
             * @return {string}
             */

            function classNameOf(object) {
                return Object.prototype.toString.call(object).slice(8, -1);
            }
            /**
             * @param {*}      object
             * @param {string} key    - Property name
             *
             * @return {?Object} https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor#Description
             */

            function getPropertyDescriptor(object, key) {
                var descriptor;
                object = Object.create(object);

                while ((object = Object.getPrototypeOf(object))) {
                    if (
                        (descriptor = Object.getOwnPropertyDescriptor(
                            object,
                            key
                        ))
                    )
                        return descriptor;
                }
            }
            /**
             * @typedef {Object} DecoratorDescriptor
             *
             * @property {String}                kind         - `class`, `field` or `method`
             * @property {String}                [key]        - Member name
             * @property {String}                [placement]  - `static` or `prototype`
             * @property {Object}                [descriptor] - Last parameter of `Object.defineProperty()`
             * @property {DecoratorDescriptor[]} [elements]   - Class members
             */

            /**
             * @param {Function|Object}   target                          - Class or its prototype
             * @param {String}            key                             - Member name
             * @param {Function|Object|*} value                           - `{ set, get }` for Field accessors
             * @param {Object}            [descriptor={enumerable: true}] - Use for `Object.defineProperty()`
             *
             * @return {DecoratorDescriptor}
             */

            function decoratorOf(target, key, value) {
                var descriptor =
                    arguments.length > 3 && arguments[3] !== undefined
                        ? arguments[3]
                        : {
                              enumerable: true
                          };
                descriptor = {
                    key: key,
                    descriptor: descriptor,
                    placement:
                        target instanceof Function ? 'static' : 'prototype'
                };
                if (value instanceof Function)
                    (descriptor.kind = 'method'),
                        (descriptor.descriptor.value = value);
                else if (
                    value.constructor === Object &&
                    (value.set || value.get) instanceof Function
                )
                    (descriptor.kind = 'method'),
                        Object.assign(descriptor.descriptor, value);
                else
                    (descriptor.kind = 'field'),
                        (descriptor.initializer = function() {
                            return value;
                        });
                return descriptor;
            }
            /**
             * @param {*} object
             *
             * @return {Boolean}
             */

            function likeArray(object) {
                object = Object(object);
                return (
                    !(object instanceof Function) &&
                    !(object instanceof Node) &&
                    (object[Symbol.iterator] instanceof Function ||
                        typeof object.length === 'number')
                );
            }

            var Array_iterator = [][Symbol.iterator];
            /**
             * @param {Object} arrayLike
             *
             * @return {Iterable} `arrayLike`
             */

            function toIterable(arrayLike) {
                if (!(arrayLike[Symbol.iterator] instanceof Function))
                    arrayLike[Symbol.iterator] = Array_iterator;
                return arrayLike;
            }
            /**
             * Iteratable decorator for Class, Method or Getter
             *
             * @param {DecoratorDescriptor} meta
             */

            function arrayLike(meta) {
                var descriptor = meta.descriptor;

                switch (meta.kind) {
                    case 'class':
                        meta.elements.push(
                            decoratorOf({}, Symbol.iterator, Array_iterator)
                        );
                        break;

                    case 'method':
                        var _arr2 = ['value', 'get'];

                        var _loop = function _loop() {
                            var key = _arr2[_i3];
                            var origin = void 0;
                            if ((origin = descriptor[key]))
                                descriptor[key] = function() {
                                    return toIterable(
                                        origin.apply(this, arguments)
                                    );
                                };
                        };

                        for (var _i3 = 0; _i3 < _arr2.length; _i3++) {
                            _loop();
                        }
                }
            }
            /**
             * Equivalent to the integration of Array's map() & filter() methods
             *
             * @param {Iterable}                                           list
             * @param {function(item: *, index: number, list:Iterable): *} filter
             *     - Return `item` itself to reserve, `undefined` or `null` to ignore, or Array to merge in.
             *
             * @return {Array}
             *
             * @see https://api.jquery.com/jQuery.map
             */

            function multipleMap(list, filter) {
                toIterable(list);
                filter = filter instanceof Function && filter;
                var result = [],
                    i = 0;
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (
                        var _iterator4 = list[Symbol.iterator](), _step4;
                        !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next())
                            .done);
                        _iteratorNormalCompletion4 = true
                    ) {
                        var item = _step4.value;
                        if (filter) item = filter(item, i++, list);
                        if (item != null)
                            result.push[
                                item instanceof Array ? 'apply' : 'call'
                            ](result, item);
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (
                            !_iteratorNormalCompletion4 &&
                            _iterator4.return != null
                        ) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                return result;
            }

            function notEqual(A, B) {
                return A !== B;
            }
            /**
             * Return `true` means that A is not equal B
             *
             * @typedef {function(A: *, B: *): Boolean} UniqueComparer
             */

            /**
             * @param {Array}                        list        - Original array
             * @param {String|Symbol|UniqueComparer} [condition]
             *
             * @return {Array} Deduplicated new array
             */

            function unique(list, condition) {
                switch (_typeof(condition)) {
                    case 'string':
                    case 'symbol':
                        condition = function(key, A, B) {
                            return A[key] !== B[key];
                        }.bind(null, condition);

                        break;

                    case 'function':
                        break;

                    default:
                        condition = notEqual;
                }

                var result = [];

                function uniqueWith(item) {
                    for (
                        var _i4 = 0, length = result.length >>> 0;
                        _i4 < length;
                        _i4++
                    ) {
                        if (!condition(item, result[_i4])) return false;
                    }

                    return true;
                }

                for (var _i5 = 0, l = list.length >>> 0; _i5 < l; _i5++) {
                    if (_i5 === 0 || uniqueWith(list[_i5]))
                        result.push(list[_i5]);
                }

                return result;
            }
            /**
             * Merge own properties of two or more objects together into the first object
             * by their descriptor
             *
             * @param {Object}    target - An object that will receive the new properties
             *                             if `source` are passed in
             * @param {...Object} source - Additional objects containing properties to merge in
             *                             (Value of `null` or `undefined` will be skipped)
             *
             * @return {Object} The `target` parameter
             *
             * @see https://api.jquery.com/jQuery.extend
             */

            function extend(target) {
                for (
                    var _len3 = arguments.length,
                        source = new Array(_len3 > 1 ? _len3 - 1 : 0),
                        _key5 = 1;
                    _key5 < _len3;
                    _key5++
                ) {
                    source[_key5 - 1] = arguments[_key5];
                }

                for (var _i6 = 0; _i6 < source.length; _i6++) {
                    var object = source[_i6];

                    if (object instanceof Object) {
                        var descriptor = Object.getOwnPropertyDescriptors(
                            object
                        );

                        var _arr3 = Object.keys(descriptor);

                        for (var _i7 = 0; _i7 < _arr3.length; _i7++) {
                            var _key6 = _arr3[_i7];
                            if (
                                'value' in descriptor[_key6] &&
                                !(descriptor[_key6].value != null)
                            )
                                delete descriptor[_key6];
                        }

                        if (object instanceof Function) {
                            delete descriptor.name;
                            delete descriptor.length;
                            delete descriptor.prototype;
                            var prototype = Object.getOwnPropertyDescriptors(
                                object.prototype
                            );
                            delete prototype.constructor;
                            Object.defineProperties(
                                target.prototype,
                                prototype
                            );
                        }

                        Object.defineProperties(target, descriptor);
                    }
                }

                return target;
            }

            var depth = 0;
            /**
             * Traverse Object-tree
             *
             * @param {Object} node     - Object tree
             * @param {String} fork_key - Key of children list
             *
             * @yield {Object}
             * @property {?Object} node   - Current node
             * @property {Object}  parent - Parent node
             * @property {Number}  index  - Index of current level
             * @property {Number}  depth  - Level count of current node
             */

            function mapTree(node, fork_key) {
                var children, i;
                return regeneratorRuntime.wrap(
                    function mapTree$(_context4) {
                        while (1) {
                            switch ((_context4.prev = _context4.next)) {
                                case 0:
                                    children = node[fork_key];
                                    depth++;
                                    i = 0;

                                case 3:
                                    if (!(i < children.length)) {
                                        _context4.next = 11;
                                        break;
                                    }

                                    _context4.next = 6;
                                    return {
                                        parent: node,
                                        node: children[i],
                                        index: i,
                                        depth: depth
                                    };

                                case 6:
                                    if (
                                        !(
                                            children[i] != null &&
                                            (children[i][fork_key] || '')[0]
                                        )
                                    ) {
                                        _context4.next = 8;
                                        break;
                                    }

                                    return _context4.delegateYield(
                                        mapTree(children[i], fork_key),
                                        't0',
                                        8
                                    );

                                case 8:
                                    i++;
                                    _context4.next = 3;
                                    break;

                                case 11:
                                    depth--;

                                case 12:
                                case 'end':
                                    return _context4.stop();
                            }
                        }
                    },
                    _marked,
                    this
                );
            }
        }
    },
    './view/ObjectView': {
        base: './view',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _object = require('../utility/object');

            var _View = _interopRequireDefault(require('./View'));

            var _Template = _interopRequireDefault(require('./Template'));

            var _DOM = require('../utility/DOM');

            var _ArrayView = _interopRequireDefault(require('./ArrayView'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var template_element = new WeakMap(),
                view_buffer = new WeakMap();

            var /**
                 * View for Object model
                 */
                ObjectView = _decorate(
                    [_object.arrayLike],
                    function(_initialize3, _View$default3) {
                        var ObjectView =
                            /*#__PURE__*/
                            (function(_View$default4) {
                                _inherits(ObjectView, _View$default4);

                                /**
                                 * @param {string|Element|DocumentFragment} template
                                 * @param {View}                            [parent]
                                 */
                                function ObjectView(template, parent) {
                                    var _this8;

                                    _classCallCheck(this, ObjectView);

                                    _this8 = _possibleConstructorReturn(
                                        this,
                                        _getPrototypeOf(ObjectView).call(
                                            this,
                                            template,
                                            'object',
                                            {},
                                            parent
                                        )
                                    );

                                    _initialize3(
                                        _assertThisInitialized(
                                            _assertThisInitialized(_this8)
                                        )
                                    );

                                    if (!_this8.booted)
                                        (_this8.length = 0), _this8.scan();
                                    return _this8;
                                }

                                return ObjectView;
                            })(_View$default3);

                        return {
                            F: ObjectView,
                            d: [
                                {
                                    kind: 'method',
                                    key: 'valueOf',
                                    value: function value() {
                                        var data = _objectSpread({}, this.data);

                                        var _iteratorNormalCompletion5 = true;
                                        var _didIteratorError5 = false;
                                        var _iteratorError5 = undefined;

                                        try {
                                            for (
                                                var _iterator5 = this[
                                                        Symbol.iterator
                                                    ](),
                                                    _step5;
                                                !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next())
                                                    .done);
                                                _iteratorNormalCompletion5 = true
                                            ) {
                                                var template = _step5.value;
                                                if (
                                                    template instanceof
                                                    _View.default
                                                )
                                                    data[
                                                        template.name
                                                    ] = template.valueOf();
                                            }
                                        } catch (err) {
                                            _didIteratorError5 = true;
                                            _iteratorError5 = err;
                                        } finally {
                                            try {
                                                if (
                                                    !_iteratorNormalCompletion5 &&
                                                    _iterator5.return != null
                                                ) {
                                                    _iterator5.return();
                                                }
                                            } finally {
                                                if (_didIteratorError5) {
                                                    throw _iteratorError5;
                                                }
                                            }
                                        }

                                        return data;
                                    }
                                },
                                {
                                    kind: 'method',
                                    static: true,
                                    key: 'templateOf',
                                    value: function value(node, renderer) {
                                        return new _Template.default(
                                            node.value || node.nodeValue,
                                            ['view', 'scope', 'host'],
                                            renderer
                                        );
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'commit',
                                    value: (function() {
                                        var _value2 = _asyncToGenerator(
                                            /*#__PURE__*/
                                            regeneratorRuntime.mark(
                                                function _callee4(key, _value) {
                                                    var buffer;
                                                    return regeneratorRuntime.wrap(
                                                        function _callee4$(
                                                            _context5
                                                        ) {
                                                            while (1) {
                                                                switch (
                                                                    (_context5.prev =
                                                                        _context5.next)
                                                                ) {
                                                                    case 0:
                                                                        if (
                                                                            !(buffer = view_buffer.get(
                                                                                this
                                                                            ))
                                                                        )
                                                                            view_buffer.set(
                                                                                this,
                                                                                (buffer = {})
                                                                            );
                                                                        buffer[
                                                                            key
                                                                        ] = _value;
                                                                        _context5.next = 4;
                                                                        return (0,
                                                                        _DOM.nextTick)();

                                                                    case 4:
                                                                        if (
                                                                            view_buffer.get(
                                                                                this
                                                                            )
                                                                        ) {
                                                                            _context5.next = 6;
                                                                            break;
                                                                        }

                                                                        return _context5.abrupt(
                                                                            'return'
                                                                        );

                                                                    case 6:
                                                                        this.render(
                                                                            buffer
                                                                        );
                                                                        view_buffer.delete(
                                                                            this
                                                                        );

                                                                    case 8:
                                                                    case 'end':
                                                                        return _context5.stop();
                                                                }
                                                            }
                                                        },
                                                        _callee4,
                                                        this
                                                    );
                                                }
                                            )
                                        );

                                        function value(_x4, _x5) {
                                            return _value2.apply(
                                                this,
                                                arguments
                                            );
                                        }

                                        return value;
                                    })()
                                },
                                {
                                    kind: 'method',
                                    key: 'watch',
                                    value: function value(key, _value3) {
                                        var _this9 = this;

                                        if (!(key in this))
                                            Object.defineProperty(
                                                this,
                                                key,
                                                _value3
                                                    ? {
                                                          value: _value3,
                                                          enumerable: true
                                                      }
                                                    : {
                                                          get: function get() {
                                                              return _this9
                                                                  .data[key];
                                                          },
                                                          set: function set(
                                                              value
                                                          ) {
                                                              return _this9.commit(
                                                                  key,
                                                                  value
                                                              );
                                                          },
                                                          enumerable: true
                                                      }
                                            );
                                        else if (
                                            key in Object.getPrototypeOf(this)
                                        )
                                            console.warn(
                                                'Don\'t overwrite Inset property "'.concat(
                                                    key,
                                                    '" !'
                                                )
                                            );
                                        return this;
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'addTemplate',
                                    value: function value(element, template) {
                                        if (!template[0]) return;
                                        template_element.set(
                                            (this[this.length++] = template),
                                            element
                                        );
                                        var _iteratorNormalCompletion6 = true;
                                        var _didIteratorError6 = false;
                                        var _iteratorError6 = undefined;

                                        try {
                                            for (
                                                var _iterator6 = template.reference
                                                        .get('view')
                                                        [Symbol.iterator](),
                                                    _step6;
                                                !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next())
                                                    .done);
                                                _iteratorNormalCompletion6 = true
                                            ) {
                                                var _key7 = _step6.value;
                                                this.watch(_key7);
                                            }
                                        } catch (err) {
                                            _didIteratorError6 = true;
                                            _iteratorError6 = err;
                                        } finally {
                                            try {
                                                if (
                                                    !_iteratorNormalCompletion6 &&
                                                    _iterator6.return != null
                                                ) {
                                                    _iterator6.return();
                                                }
                                            } finally {
                                                if (_didIteratorError6) {
                                                    throw _iteratorError6;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'addView',
                                    value: function value(name, view) {
                                        this.watch(name, view)[
                                            this.length++
                                        ] = view;
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'parseTag',
                                    value: function value(element) {
                                        var _this10 = this;

                                        var _arr4 = _toConsumableArray(
                                            element.attributes
                                        );

                                        var _loop2 = function _loop2() {
                                            var attr = _arr4[_i8];
                                            var name = attr.name,
                                                value = attr.value;
                                            if (!value.trim())
                                                return 'continue';
                                            var template = ObjectView.templateOf(
                                                attr,
                                                name in element
                                                    ? function(value) {
                                                          return (element[
                                                              name
                                                          ] = value);
                                                      }
                                                    : function(value) {
                                                          return element.setAttribute(
                                                              name,
                                                              value
                                                          );
                                                      }
                                            );
                                            if (template == '')
                                                element.removeAttribute(name);

                                            _this10.addTemplate(
                                                element,
                                                template
                                            );
                                        };

                                        for (
                                            var _i8 = 0;
                                            _i8 < _arr4.length;
                                            _i8++
                                        ) {
                                            var _ret = _loop2();

                                            if (_ret === 'continue') continue;
                                        }
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'scan',
                                    value: function value() {
                                        var _this11 = this;

                                        var root = this.content;
                                        root =
                                            root instanceof Node
                                                ? root
                                                : {
                                                      childNodes: root
                                                  };
                                        var _iteratorNormalCompletion7 = true;
                                        var _didIteratorError7 = false;
                                        var _iteratorError7 = undefined;

                                        try {
                                            var _loop3 = function _loop3() {
                                                var node = _step7.value.node;

                                                switch (node.nodeType) {
                                                    case 1:
                                                        if (node.dataset.object)
                                                            _this11.addView(
                                                                node.dataset
                                                                    .object,
                                                                new ObjectView(
                                                                    node
                                                                )
                                                            );
                                                        else if (
                                                            node.dataset.array
                                                        )
                                                            _this11.addView(
                                                                node.dataset
                                                                    .array,
                                                                new _ArrayView.default(
                                                                    node
                                                                )
                                                            );
                                                        else
                                                            _this11.parseTag(
                                                                node
                                                            );
                                                        break;

                                                    case 3: {
                                                        var template = ObjectView.templateOf(
                                                                node,
                                                                function(
                                                                    value
                                                                ) {
                                                                    return (node.nodeValue = value);
                                                                }
                                                            ),
                                                            element =
                                                                node.parentNode;
                                                        if (
                                                            !element.innerHTML.trim()
                                                        )
                                                            template.onChange = function(
                                                                value
                                                            ) {
                                                                return (element.innerHTML = value);
                                                            };

                                                        _this11.addTemplate(
                                                            element,
                                                            template
                                                        );
                                                    }
                                                }
                                            };

                                            for (
                                                var _iterator7 = (0,
                                                    _object.mapTree)(
                                                        root,
                                                        'childNodes'
                                                    )[Symbol.iterator](),
                                                    _step7;
                                                !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next())
                                                    .done);
                                                _iteratorNormalCompletion7 = true
                                            ) {
                                                _loop3();
                                            }
                                        } catch (err) {
                                            _didIteratorError7 = true;
                                            _iteratorError7 = err;
                                        } finally {
                                            try {
                                                if (
                                                    !_iteratorNormalCompletion7 &&
                                                    _iterator7.return != null
                                                ) {
                                                    _iterator7.return();
                                                }
                                            } finally {
                                                if (_didIteratorError7) {
                                                    throw _iteratorError7;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    kind: 'get',
                                    key: 'scope',
                                    value: function value() {
                                        var view = this;

                                        while ((view = view.parent)) {
                                            if (
                                                !(
                                                    view instanceof
                                                    _ArrayView.default
                                                )
                                            )
                                                return view.data;
                                        }
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'render',
                                    value: function value() {
                                        var data =
                                            arguments.length > 0 &&
                                            arguments[0] !== undefined
                                                ? arguments[0]
                                                : {};
                                        var target = this.content;
                                        target =
                                            target instanceof Node
                                                ? target
                                                : target[0];
                                        if (
                                            !(0, _DOM.trigger)(
                                                target,
                                                'update',
                                                {
                                                    oldData: this.valueOf(),
                                                    newData: data,
                                                    view: this
                                                },
                                                true,
                                                true
                                            )
                                        )
                                            return this;

                                        var _data_ = (0, _object.extend)(
                                            this.data,
                                            data
                                        );

                                        for (var _key8 in data) {
                                            this.watch(_key8);
                                        }

                                        var _iteratorNormalCompletion8 = true;
                                        var _didIteratorError8 = false;
                                        var _iteratorError8 = undefined;

                                        try {
                                            for (
                                                var _iterator8 = this[
                                                        Symbol.iterator
                                                    ](),
                                                    _step8;
                                                !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next())
                                                    .done);
                                                _iteratorNormalCompletion8 = true
                                            ) {
                                                var template = _step8.value;
                                                var name = template.name;
                                                if (
                                                    template instanceof
                                                    _Template.default
                                                )
                                                    template.evaluate(
                                                        template_element.get(
                                                            template
                                                        ),
                                                        _data_,
                                                        this.scope,
                                                        this.rootHost
                                                    );
                                                else if (
                                                    template instanceof
                                                    _View.default
                                                )
                                                    _data_[
                                                        name
                                                    ] = template.render(
                                                        data[name]
                                                    ).data;
                                            }
                                        } catch (err) {
                                            _didIteratorError8 = true;
                                            _iteratorError8 = err;
                                        } finally {
                                            try {
                                                if (
                                                    !_iteratorNormalCompletion8 &&
                                                    _iterator8.return != null
                                                ) {
                                                    _iterator8.return();
                                                }
                                            } finally {
                                                if (_didIteratorError8) {
                                                    throw _iteratorError8;
                                                }
                                            }
                                        }

                                        (0, _DOM.trigger)(
                                            target,
                                            'updated',
                                            {
                                                data: data,
                                                view: this
                                            },
                                            true
                                        );
                                        return this;
                                    }
                                },
                                {
                                    kind: 'method',
                                    key: 'clear',
                                    value: function value() {
                                        var _iteratorNormalCompletion9 = true;
                                        var _didIteratorError9 = false;
                                        var _iteratorError9 = undefined;

                                        try {
                                            for (
                                                var _iterator9 = this[
                                                        Symbol.iterator
                                                    ](),
                                                    _step9;
                                                !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next())
                                                    .done);
                                                _iteratorNormalCompletion9 = true
                                            ) {
                                                var template = _step9.value;
                                                template.clear();
                                            }
                                        } catch (err) {
                                            _didIteratorError9 = true;
                                            _iteratorError9 = err;
                                        } finally {
                                            try {
                                                if (
                                                    !_iteratorNormalCompletion9 &&
                                                    _iterator9.return != null
                                                ) {
                                                    _iterator9.return();
                                                }
                                            } finally {
                                                if (_didIteratorError9) {
                                                    throw _iteratorError9;
                                                }
                                            }
                                        }

                                        return this;
                                    }
                                }
                            ]
                        };
                    },
                    _View.default
                );

            exports.default = ObjectView;
        }
    },
    './component/Component': {
        base: './component',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _ObjectView = _interopRequireDefault(
                require('../view/ObjectView')
            );

            var _View = _interopRequireDefault(require('../view/View'));

            var _resource = require('../utility/resource');

            var _DOM = require('../utility/DOM');

            var _object = require('../utility/object');

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var attr_prop = {
                    class: 'className',
                    for: 'htmlFor',
                    readonly: 'readOnly'
                },
                event_handler = new Map();
            /**
             * Utility methods of Web Component
             */

            var Component =
                /*#__PURE__*/
                (function() {
                    function Component() {
                        _classCallCheck(this, Component);
                    }

                    _createClass(
                        Component,
                        [
                            {
                                key: 'buildDOM',

                                /**
                                 * @param {?Object} option - https://developer.mozilla.org/en-US/docs/Web/API/element/attachShadow#Parameters
                                 *
                                 * @return {HTMLElement} This custom element
                                 */
                                value: function buildDOM(option) {
                                    if (
                                        self.ShadyCSS &&
                                        !(
                                            ShadyCSS.nativeCss &&
                                            ShadyCSS.nativeShadow
                                        )
                                    )
                                        ShadyCSS.styleElement(this);
                                    var shadow = this.attachShadow(
                                            _objectSpread(
                                                {
                                                    mode: 'open',
                                                    delegatesFocus: true
                                                },
                                                option
                                            )
                                        ),
                                        _this$constructor = this.constructor,
                                        template = _this$constructor.template,
                                        data = _this$constructor.data;
                                    if (template)
                                        shadow.appendChild(
                                            document.importNode(template, true)
                                        );
                                    this.bootHook();
                                    var view = new _ObjectView.default(shadow);
                                    if (view[0]) view.render(data || {});
                                    var map =
                                        event_handler.get(this.constructor) ||
                                        '';
                                    var _iteratorNormalCompletion10 = true;
                                    var _didIteratorError10 = false;
                                    var _iteratorError10 = undefined;

                                    try {
                                        for (
                                            var _iterator10 = map[
                                                    Symbol.iterator
                                                ](),
                                                _step10;
                                            !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next())
                                                .done);
                                            _iteratorNormalCompletion10 = true
                                        ) {
                                            var _step10$value = _step10.value,
                                                type = _step10$value.type,
                                                selector =
                                                    _step10$value.selector,
                                                handler = _step10$value.handler;
                                            this.on(
                                                type,
                                                selector,
                                                handler.bind(this)
                                            );
                                        }
                                    } catch (err) {
                                        _didIteratorError10 = true;
                                        _iteratorError10 = err;
                                    } finally {
                                        try {
                                            if (
                                                !_iteratorNormalCompletion10 &&
                                                _iterator10.return != null
                                            ) {
                                                _iterator10.return();
                                            }
                                        } finally {
                                            if (_didIteratorError10) {
                                                throw _iteratorError10;
                                            }
                                        }
                                    }

                                    return this;
                                }
                                /**
                                 * @private
                                 */
                            },
                            {
                                key: 'bootHook',
                                value: function bootHook() {
                                    var _this12 = this;

                                    if (
                                        this.slotChangedCallback instanceof
                                        Function
                                    ) {
                                        var _iteratorNormalCompletion11 = true;
                                        var _didIteratorError11 = false;
                                        var _iteratorError11 = undefined;

                                        try {
                                            var _loop4 = function _loop4() {
                                                var slot = _step11.value;
                                                slot.addEventListener(
                                                    'slotchange',
                                                    function() {
                                                        return _this12.slotChangedCallback(
                                                            _toConsumableArray(
                                                                slot.assignedNodes()
                                                            ),
                                                            slot,
                                                            slot.name
                                                        );
                                                    }
                                                );
                                            };

                                            for (
                                                var _iterator11 = this.$(
                                                        'slot'
                                                    )[Symbol.iterator](),
                                                    _step11;
                                                !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next())
                                                    .done);
                                                _iteratorNormalCompletion11 = true
                                            ) {
                                                _loop4();
                                            }
                                        } catch (err) {
                                            _didIteratorError11 = true;
                                            _iteratorError11 = err;
                                        } finally {
                                            try {
                                                if (
                                                    !_iteratorNormalCompletion11 &&
                                                    _iterator11.return != null
                                                ) {
                                                    _iterator11.return();
                                                }
                                            } finally {
                                                if (_didIteratorError11) {
                                                    throw _iteratorError11;
                                                }
                                            }
                                        }
                                    }

                                    if (
                                        this.viewUpdateCallback instanceof
                                        Function
                                    )
                                        this.shadowRoot.addEventListener(
                                            'update',
                                            function(event) {
                                                var _event$detail =
                                                        event.detail,
                                                    oldData =
                                                        _event$detail.oldData,
                                                    newData =
                                                        _event$detail.newData,
                                                    view = _event$detail.view;
                                                if (
                                                    _this12.viewUpdateCallback(
                                                        newData,
                                                        oldData,
                                                        view
                                                    ) === false
                                                )
                                                    event.preventDefault();
                                            }
                                        );
                                    if (
                                        this.viewChangedCallback instanceof
                                        Function
                                    )
                                        this.shadowRoot.addEventListener(
                                            'updated',
                                            function(_ref19) {
                                                var _ref19$detail =
                                                        _ref19.detail,
                                                    data = _ref19$detail.data,
                                                    view = _ref19$detail.view;
                                                return _this12.viewChangedCallback(
                                                    data,
                                                    view
                                                );
                                            }
                                        );
                                }
                                /**
                                 * Main view of this component
                                 *
                                 * @type {View}
                                 */
                            },
                            {
                                key: 'attributeChangedCallback',

                                /**
                                 * Assign the new value to the DOM property
                                 * which has the same name of the changed attribute
                                 *
                                 * @protected
                                 *
                                 * @param {string}  name
                                 * @param {?string} oldValue
                                 * @param {?string} newValue
                                 *
                                 * @return {*} DOM property value of `newValue`
                                 */
                                value: function attributeChangedCallback(
                                    name,
                                    oldValue,
                                    newValue
                                ) {
                                    name = attr_prop[name] || name;

                                    switch (newValue) {
                                        case '':
                                            return (this[name] = true);

                                        case null:
                                            return (this[name] = false);

                                        default:
                                            try {
                                                return (this[name] = (0,
                                                _resource.parse)(newValue));
                                            } catch (error) {
                                                return (this[name] = newValue);
                                            }
                                    }
                                }
                                /**
                                 * @param {string} selector - CSS selector
                                 *
                                 * @return {Element[]} Element set which matches `selector` in this Shadow DOM
                                 */
                            },
                            {
                                key: '$',
                                value: function $(selector) {
                                    return (0, _DOM.$)(
                                        selector,
                                        this.shadowRoot
                                    );
                                }
                                /**
                                 * @param {string} selector - CSS selector
                                 *
                                 * @return {?Element} Matched parent
                                 */
                            },
                            {
                                key: '$up',
                                value: function $up(selector) {
                                    return (0, _DOM.$up)(selector, this);
                                }
                                /**
                                 * @param {string} selector - CSS selector
                                 *
                                 * @return {Element[]} Matched elements which assigned to slots
                                 */
                            },
                            {
                                key: '$slot',
                                value: function $slot(selector) {
                                    return (0, _object.multipleMap)(
                                        (0, _object.multipleMap)(
                                            this.$('slot'),
                                            function(slot) {
                                                return slot.assignedNodes();
                                            }
                                        ),
                                        function(node) {
                                            if (!(node instanceof Element))
                                                return;
                                            var list = [];
                                            if (node.matches(selector))
                                                list[0] = node;
                                            return list.concat(
                                                (0, _DOM.$)(selector, node)
                                            );
                                        }
                                    );
                                }
                                /**
                                 * Delegate listener for DOM events
                                 *
                                 * @param {string}       type       - Name of a DOM event
                                 * @param {string}       [selector] - CSS selector of delegate elements
                                 * @param {EventHandler} callback
                                 *
                                 * @return {Element} This element
                                 */
                            },
                            {
                                key: 'on',
                                value: function on(type, selector, callback) {
                                    if (selector instanceof Function)
                                        (callback = selector), (selector = '');
                                    var node = /^:host/.test(selector)
                                        ? this.shadowRoot
                                        : this;
                                    callback = selector
                                        ? (0, _DOM.delegate)(selector, callback)
                                        : callback;

                                    if (type === 'input') {
                                        var origin = callback;

                                        callback = function callback(event) {
                                            if (event instanceof CustomEvent)
                                                origin.apply(this, arguments);
                                        };
                                    }

                                    node.addEventListener(type, callback);
                                    if (type === 'input')
                                        (0, _DOM.watchInput)(node);
                                    return this;
                                }
                                /**
                                 * @param {String|Event} event
                                 * @param {?*}           detail     - Additional data
                                 * @param {?Boolean}     bubbles
                                 * @param {?Boolean}     cancelable
                                 * @param {?Boolean}     composed   - Whether the event will cross
                                 *                                    from the shadow DOM into the standard DOM
                                 *                                    after reaching the shadow root
                                 * @return {Boolean} Event be canceled or not
                                 */
                            },
                            {
                                key: 'trigger',
                                value: function trigger(
                                    event,
                                    detail,
                                    bubbles,
                                    cancelable,
                                    composed
                                ) {
                                    return (0, _DOM.trigger)(
                                        this,
                                        event,
                                        detail,
                                        bubbles,
                                        cancelable,
                                        composed
                                    );
                                }
                            },
                            {
                                key: Symbol.toStringTag,
                                get: function get() {
                                    return this.constructor.name;
                                }
                                /**
                                 * @private
                                 *
                                 * @param {String}   type
                                 * @param {String}   selector
                                 * @param {Function} handler
                                 */
                            },
                            {
                                key: 'view',
                                get: function get() {
                                    return _View.default.instanceOf(
                                        this.shadowRoot
                                    );
                                }
                                /**
                                 * Set the getter & setter of the DOM property
                                 *
                                 * @private
                                 *
                                 * @param {string[]} attributes - Names of HTML attributes
                                 *
                                 * @return {string[]} `attributes`
                                 */
                            }
                        ],
                        [
                            {
                                key: 'on',
                                value: function on(type, selector, handler) {
                                    var map = event_handler.get(this);
                                    if (!map)
                                        event_handler.set(this, (map = []));
                                    map.push({
                                        type: type,
                                        selector: selector,
                                        handler: handler
                                    });
                                }
                            },
                            {
                                key: 'linkDataOf',
                                value: function linkDataOf(attributes) {
                                    var _this13 = this;

                                    var _iteratorNormalCompletion12 = true;
                                    var _didIteratorError12 = false;
                                    var _iteratorError12 = undefined;

                                    try {
                                        var _loop5 = function _loop5() {
                                            var key = _step12.value;
                                            key = attr_prop[key] || key;
                                            if (!(key in _this13.prototype))
                                                Object.defineProperty(
                                                    _this13.prototype,
                                                    key,
                                                    {
                                                        set: function set(
                                                            value
                                                        ) {
                                                            this.view.commit(
                                                                key,
                                                                value
                                                            );
                                                        },
                                                        get: function get() {
                                                            return this.view
                                                                .data[key];
                                                        },
                                                        enumerable: true
                                                    }
                                                );
                                        };

                                        for (
                                            var _iterator12 = attributes[
                                                    Symbol.iterator
                                                ](),
                                                _step12;
                                            !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next())
                                                .done);
                                            _iteratorNormalCompletion12 = true
                                        ) {
                                            _loop5();
                                        }
                                    } catch (err) {
                                        _didIteratorError12 = true;
                                        _iteratorError12 = err;
                                    } finally {
                                        try {
                                            if (
                                                !_iteratorNormalCompletion12 &&
                                                _iterator12.return != null
                                            ) {
                                                _iterator12.return();
                                            }
                                        } finally {
                                            if (_didIteratorError12) {
                                                throw _iteratorError12;
                                            }
                                        }
                                    }

                                    return attributes;
                                }
                            },
                            {
                                key: 'tagName',

                                /**
                                 * @type {string} - `tagName` of a Custom Element
                                 */
                                get: function get() {
                                    return this.name
                                        .replace(/[A-Z]/g, function(char) {
                                            return '-' + char.toLowerCase();
                                        })
                                        .slice(1);
                                }
                            }
                        ]
                    );

                    return Component;
                })();
            /**
             * @typedef {function(event: Event): *} EventHandler
             */

            exports.default = Component;
        }
    },
    './WebCell': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            var _exportNames = {
                mapProperty: true,
                mapData: true,
                blobURI: true,
                at: true,
                on: true,
                component: true,
                Component: true,
                InputComponent: true,
                Template: true,
                View: true,
                ObjectView: true,
                ArrayView: true
            };
            exports.mapProperty = mapProperty;
            exports.mapData = mapData;
            exports.blobURI = blobURI;
            exports.at = at;
            exports.on = on;
            exports.component = component;
            Object.defineProperty(exports, 'Component', {
                enumerable: true,
                get: function get() {
                    return _Component.default;
                }
            });
            Object.defineProperty(exports, 'InputComponent', {
                enumerable: true,
                get: function get() {
                    return _InputComponent.default;
                }
            });
            Object.defineProperty(exports, 'Template', {
                enumerable: true,
                get: function get() {
                    return _Template.default;
                }
            });
            Object.defineProperty(exports, 'View', {
                enumerable: true,
                get: function get() {
                    return _View.default;
                }
            });
            Object.defineProperty(exports, 'ObjectView', {
                enumerable: true,
                get: function get() {
                    return _ObjectView.default;
                }
            });
            Object.defineProperty(exports, 'ArrayView', {
                enumerable: true,
                get: function get() {
                    return _ArrayView.default;
                }
            });

            var _Component = _interopRequireDefault(
                require('./component/Component')
            );

            var _object = require('./utility/object');

            Object.keys(_object).forEach(function(key) {
                if (key === 'default' || key === '__esModule') return;
                if (Object.prototype.hasOwnProperty.call(_exportNames, key))
                    return;
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function get() {
                        return _object[key];
                    }
                });
            });

            var _DOM = require('./utility/DOM');

            Object.keys(_DOM).forEach(function(key) {
                if (key === 'default' || key === '__esModule') return;
                if (Object.prototype.hasOwnProperty.call(_exportNames, key))
                    return;
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function get() {
                        return _DOM[key];
                    }
                });
            });

            var _resource = require('./utility/resource');

            Object.keys(_resource).forEach(function(key) {
                if (key === 'default' || key === '__esModule') return;
                if (Object.prototype.hasOwnProperty.call(_exportNames, key))
                    return;
                Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: function get() {
                        return _resource[key];
                    }
                });
            });

            var _InputComponent = _interopRequireDefault(
                require('./component/InputComponent')
            );

            var _Template = _interopRequireDefault(require('./view/Template'));

            var _View = _interopRequireDefault(require('./view/View'));

            var _ObjectView = _interopRequireDefault(
                require('./view/ObjectView')
            );

            var _ArrayView = _interopRequireDefault(
                require('./view/ArrayView')
            );

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * Decorator for `observedAttributes` getter
             *
             * @param {DecoratorDescriptor} meta
             */

            function mapProperty(meta) {
                var getter = meta.descriptor.get;

                meta.descriptor.get = function() {
                    var list = getter.call(this);
                    var _iteratorNormalCompletion13 = true;
                    var _didIteratorError13 = false;
                    var _iteratorError13 = undefined;

                    try {
                        for (
                            var _iterator13 = list[Symbol.iterator](), _step13;
                            !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next())
                                .done);
                            _iteratorNormalCompletion13 = true
                        ) {
                            var _key9 = _step13.value;
                            if (
                                Object.getOwnPropertyDescriptor(
                                    HTMLElement.prototype,
                                    _key9
                                ) &&
                                !Object.getOwnPropertyDescriptor(
                                    this.constructor.prototype,
                                    _key9
                                )
                            )
                                throw ReferenceError(
                                    'HTML DOM property "'.concat(
                                        _key9,
                                        '" getter should be overwritten'
                                    )
                                );
                        }
                    } catch (err) {
                        _didIteratorError13 = true;
                        _iteratorError13 = err;
                    } finally {
                        try {
                            if (
                                !_iteratorNormalCompletion13 &&
                                _iterator13.return != null
                            ) {
                                _iterator13.return();
                            }
                        } finally {
                            if (_didIteratorError13) {
                                throw _iteratorError13;
                            }
                        }
                    }

                    return this.linkDataOf(list);
                };
            }
            /**
             * Decorator for `attributeChangedCallback()` method
             *
             * @param {DecoratorDescriptor} meta
             */

            function mapData(meta) {
                var origin = meta.descriptor.value,
                    onChange =
                        _Component.default.prototype.attributeChangedCallback;

                meta.descriptor.value = function(name, oldValue) {
                    origin.call(
                        this,
                        name,
                        oldValue,
                        onChange.apply(this, arguments)
                    );
                };
            }
            /**
             * Decorator for Property getter which returns Data URI
             *
             * @param {DecoratorDescriptor} meta
             */

            function blobURI(meta) {
                var getter = meta.descriptor.get,
                    blob;

                meta.descriptor.get = function() {
                    return (
                        blob ||
                        (blob = URL.createObjectURL(
                            (0, _resource.blobFrom)(
                                getter.apply(this, arguments)
                            )
                        ))
                    );
                };
            }
            /**
             * @param {String} selector - CSS selector
             *
             * @return {Function} Decorator for Event handler
             */

            function at(selector) {
                return function(_ref20) {
                    var descriptor = _ref20.descriptor;
                    descriptor.value = (0, _DOM.delegate)(
                        selector,
                        descriptor.value
                    );
                };
            }
            /**
             * @param {String} type
             * @param {String} selector
             *
             * @return {Function} Decorator for Event handler
             */

            function on(type, selector) {
                return function(meta) {
                    meta.finisher = function(Class) {
                        Class.on(type, selector, meta.descriptor.value);
                    };
                };
            }

            var skip_key = {
                name: 1,
                length: 1,
                prototype: 1,
                caller: 1,
                arguments: 1,
                call: 1,
                apply: 1,
                bind: 1,
                constructor: 1
            };

            function decoratorMix(mixin) {
                var isClass = mixin instanceof Function;
                return (0, _object.multipleMap)(
                    Object.entries(Object.getOwnPropertyDescriptors(mixin)),
                    function(_ref21) {
                        var _ref22 = _slicedToArray(_ref21, 2),
                            key = _ref22[0],
                            meta = _ref22[1];

                        if (
                            !(isClass
                                ? skip_key[key]
                                : key === 'constructor' &&
                                  meta.value instanceof Function)
                        )
                            return (0, _object.decoratorOf)(
                                mixin,
                                key,
                                meta.value || meta
                            );
                    }
                );
            }

            function define(meta, template, style) {
                if (template) {
                    if (template instanceof Node)
                        template = (0, _DOM.stringifyDOM)(template);
                    template = (0, _DOM.parseDOM)((template + '').trim());

                    if (template.firstChild.tagName !== 'TEMPLATE') {
                        var temp = document.createElement('template');
                        temp.content.appendChild(template);
                        template = temp;
                    } else template = template.firstChild;
                } else template = document.createElement('template');

                meta.push(
                    (0, _object.decoratorOf)(
                        _Component.default,
                        'template',
                        template.content
                    )
                );

                if (style) {
                    if (!(style instanceof Node))
                        style = Object.assign(document.createElement('style'), {
                            textContent: style
                        });
                    meta.push(
                        (0, _object.decoratorOf)(
                            _Component.default,
                            'style',
                            style
                        )
                    );
                    template.content.insertBefore(
                        style,
                        template.content.firstChild
                    );
                }

                return template;
            }
            /**
             * Register a component
             *
             * @param {Object}         meta
             * @param {String|Node}    [meta.template] - HTML template source or sub DOM tree
             * @param {String|Element} [meta.style]    - CSS source or `<style />`
             * @param {Object}         [meta.data]     - Initial data
             * @param {String}         [meta.tagName]  - Name of an HTML original tag to extend
             *
             * @return {function(elements: DecoratorDescriptor[]): Object} Component class decorator
             */

            function component() {
                var meta =
                    arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : {};
                var template = meta.template,
                    style = meta.style,
                    data = meta.data,
                    tagName = meta.tagName;
                return function(_ref23) {
                    var elements = _ref23.elements;
                    var merged =
                        (template || style) &&
                        define(elements, template, style);
                    if (data)
                        elements.push(
                            (0, _object.decoratorOf)(
                                _Component.default,
                                'data',
                                data
                            )
                        );
                    elements.push.apply(
                        elements,
                        _toConsumableArray(
                            decoratorMix(_Component.default)
                        ).concat(
                            _toConsumableArray(
                                decoratorMix(_Component.default.prototype)
                            )
                        )
                    );
                    return {
                        kind: 'class',
                        elements: (0, _object.unique)(elements, function(A, B) {
                            return (
                                A.key !== B.key || A.placement !== B.placement
                            );
                        }),
                        finisher: function finisher(Class) {
                            if (
                                merged &&
                                self.ShadyCSS &&
                                !(ShadyCSS.nativeCss && ShadyCSS.nativeShadow)
                            )
                                ShadyCSS.prepareTemplate(merged, Class.tagName);
                            self.customElements.define(
                                Class.tagName,
                                Class,
                                tagName && {
                                    extends: tagName
                                }
                            );
                        }
                    };
                };
            }
        }
    }
};

    return _include_('./WebCell');
});